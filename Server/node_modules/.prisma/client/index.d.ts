
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model post
 * 
 */
export type post = $Result.DefaultSelection<Prisma.$postPayload>
/**
 * Model postDetail
 * 
 */
export type postDetail = $Result.DefaultSelection<Prisma.$postDetailPayload>
/**
 * Model savedPost
 * 
 */
export type savedPost = $Result.DefaultSelection<Prisma.$savedPostPayload>
/**
 * Model chat
 * 
 */
export type chat = $Result.DefaultSelection<Prisma.$chatPayload>
/**
 * Model message
 * 
 */
export type message = $Result.DefaultSelection<Prisma.$messagePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const type: {
  Buy: 'Buy',
  Rent: 'Rent'
};

export type type = (typeof type)[keyof typeof type]


export const property: {
  Apartment: 'Apartment',
  House: 'House',
  Villa: 'Villa',
  Townhouse: 'Townhouse',
  Penthouse: 'Penthouse',
  Duplex: 'Duplex',
  Studio: 'Studio',
  Bungalow: 'Bungalow'
};

export type property = (typeof property)[keyof typeof property]

}

export type type = $Enums.type

export const type: typeof $Enums.type

export type property = $Enums.property

export const property: typeof $Enums.property

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.postDelegate<ExtArgs>;

  /**
   * `prisma.postDetail`: Exposes CRUD operations for the **postDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostDetails
    * const postDetails = await prisma.postDetail.findMany()
    * ```
    */
  get postDetail(): Prisma.postDetailDelegate<ExtArgs>;

  /**
   * `prisma.savedPost`: Exposes CRUD operations for the **savedPost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SavedPosts
    * const savedPosts = await prisma.savedPost.findMany()
    * ```
    */
  get savedPost(): Prisma.savedPostDelegate<ExtArgs>;

  /**
   * `prisma.chat`: Exposes CRUD operations for the **chat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Chats
    * const chats = await prisma.chat.findMany()
    * ```
    */
  get chat(): Prisma.chatDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    post: 'post',
    postDetail: 'postDetail',
    savedPost: 'savedPost',
    chat: 'chat',
    message: 'message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "post" | "postDetail" | "savedPost" | "chat" | "message"
      txIsolationLevel: never
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.userFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.userAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      post: {
        payload: Prisma.$postPayload<ExtArgs>
        fields: Prisma.postFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          findFirst: {
            args: Prisma.postFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          findMany: {
            args: Prisma.postFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>[]
          }
          create: {
            args: Prisma.postCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          createMany: {
            args: Prisma.postCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.postDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          update: {
            args: Prisma.postUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          deleteMany: {
            args: Prisma.postDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.postUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.postUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.postGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.postFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.postAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.postCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      postDetail: {
        payload: Prisma.$postDetailPayload<ExtArgs>
        fields: Prisma.postDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postDetailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postDetailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          findFirst: {
            args: Prisma.postDetailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postDetailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          findMany: {
            args: Prisma.postDetailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>[]
          }
          create: {
            args: Prisma.postDetailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          createMany: {
            args: Prisma.postDetailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.postDetailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          update: {
            args: Prisma.postDetailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          deleteMany: {
            args: Prisma.postDetailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.postDetailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.postDetailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postDetailPayload>
          }
          aggregate: {
            args: Prisma.PostDetailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostDetail>
          }
          groupBy: {
            args: Prisma.postDetailGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostDetailGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.postDetailFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.postDetailAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.postDetailCountArgs<ExtArgs>
            result: $Utils.Optional<PostDetailCountAggregateOutputType> | number
          }
        }
      }
      savedPost: {
        payload: Prisma.$savedPostPayload<ExtArgs>
        fields: Prisma.savedPostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.savedPostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.savedPostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          findFirst: {
            args: Prisma.savedPostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.savedPostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          findMany: {
            args: Prisma.savedPostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>[]
          }
          create: {
            args: Prisma.savedPostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          createMany: {
            args: Prisma.savedPostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.savedPostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          update: {
            args: Prisma.savedPostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          deleteMany: {
            args: Prisma.savedPostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.savedPostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.savedPostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$savedPostPayload>
          }
          aggregate: {
            args: Prisma.SavedPostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSavedPost>
          }
          groupBy: {
            args: Prisma.savedPostGroupByArgs<ExtArgs>
            result: $Utils.Optional<SavedPostGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.savedPostFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.savedPostAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.savedPostCountArgs<ExtArgs>
            result: $Utils.Optional<SavedPostCountAggregateOutputType> | number
          }
        }
      }
      chat: {
        payload: Prisma.$chatPayload<ExtArgs>
        fields: Prisma.chatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          findFirst: {
            args: Prisma.chatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          findMany: {
            args: Prisma.chatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>[]
          }
          create: {
            args: Prisma.chatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          createMany: {
            args: Prisma.chatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.chatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          update: {
            args: Prisma.chatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          deleteMany: {
            args: Prisma.chatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.chatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.chatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatPayload>
          }
          aggregate: {
            args: Prisma.ChatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChat>
          }
          groupBy: {
            args: Prisma.chatGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.chatFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.chatAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.chatCountArgs<ExtArgs>
            result: $Utils.Optional<ChatCountAggregateOutputType> | number
          }
        }
      }
      message: {
        payload: Prisma.$messagePayload<ExtArgs>
        fields: Prisma.messageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findFirst: {
            args: Prisma.messageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findMany: {
            args: Prisma.messageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          create: {
            args: Prisma.messageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          createMany: {
            args: Prisma.messageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.messageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          update: {
            args: Prisma.messageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          deleteMany: {
            args: Prisma.messageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.messageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.messageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.messageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.messageFindRawArgs<ExtArgs>
            result: JsonObject
          }
          aggregateRaw: {
            args: Prisma.messageAggregateRawArgs<ExtArgs>
            result: JsonObject
          }
          count: {
            args: Prisma.messageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    posts: number
    savedPost: number
    chats: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    savedPost?: boolean | UserCountOutputTypeCountSavedPostArgs
    chats?: boolean | UserCountOutputTypeCountChatsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSavedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: savedPostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chatWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    savedPost: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    savedPost?: boolean | PostCountOutputTypeCountSavedPostArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountSavedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: savedPostWhereInput
  }


  /**
   * Count Type ChatCountOutputType
   */

  export type ChatCountOutputType = {
    users: number
    message: number
  }

  export type ChatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | ChatCountOutputTypeCountUsersArgs
    message?: boolean | ChatCountOutputTypeCountMessageArgs
  }

  // Custom InputTypes
  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatCountOutputType
     */
    select?: ChatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
  }

  /**
   * ChatCountOutputType without action
   */
  export type ChatCountOutputTypeCountMessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    profilePic: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    password: string | null
    profilePic: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    password: number
    profilePic: number
    createdAt: number
    chatIds: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    profilePic?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    profilePic?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    password?: true
    profilePic?: true
    createdAt?: true
    chatIds?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    password: string
    profilePic: string | null
    createdAt: Date
    chatIds: string[]
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    profilePic?: boolean
    createdAt?: boolean
    chatIds?: boolean
    posts?: boolean | user$postsArgs<ExtArgs>
    savedPost?: boolean | user$savedPostArgs<ExtArgs>
    chats?: boolean | user$chatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    password?: boolean
    profilePic?: boolean
    createdAt?: boolean
    chatIds?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | user$postsArgs<ExtArgs>
    savedPost?: boolean | user$savedPostArgs<ExtArgs>
    chats?: boolean | user$chatsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      posts: Prisma.$postPayload<ExtArgs>[]
      savedPost: Prisma.$savedPostPayload<ExtArgs>[]
      chats: Prisma.$chatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      password: string
      profilePic: string | null
      createdAt: Date
      chatIds: string[]
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {userFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const user = await prisma.user.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: userFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a User.
     * @param {userAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const user = await prisma.user.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: userAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posts<T extends user$postsArgs<ExtArgs> = {}>(args?: Subset<T, user$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findMany"> | Null>
    savedPost<T extends user$savedPostArgs<ExtArgs> = {}>(args?: Subset<T, user$savedPostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findMany"> | Null>
    chats<T extends user$chatsArgs<ExtArgs> = {}>(args?: Subset<T, user$chatsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly username: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly profilePic: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
    readonly chatIds: FieldRef<"user", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user findRaw
   */
  export type userFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * user aggregateRaw
   */
  export type userAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * user.posts
   */
  export type user$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    where?: postWhereInput
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    cursor?: postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * user.savedPost
   */
  export type user$savedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    where?: savedPostWhereInput
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    cursor?: savedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedPostScalarFieldEnum | SavedPostScalarFieldEnum[]
  }

  /**
   * user.chats
   */
  export type user$chatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    where?: chatWhereInput
    orderBy?: chatOrderByWithRelationInput | chatOrderByWithRelationInput[]
    cursor?: chatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostAvgAggregateOutputType = {
    price: number | null
    bedroom: number | null
    bathroom: number | null
    latitude: number | null
    longitude: number | null
  }

  export type PostSumAggregateOutputType = {
    price: number | null
    bedroom: number | null
    bathroom: number | null
    latitude: number | null
    longitude: number | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    address: string | null
    city: string | null
    bedroom: number | null
    bathroom: number | null
    latitude: number | null
    longitude: number | null
    type: $Enums.type | null
    property: $Enums.property | null
    createdAt: Date | null
    userId: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    address: string | null
    city: string | null
    bedroom: number | null
    bathroom: number | null
    latitude: number | null
    longitude: number | null
    type: $Enums.type | null
    property: $Enums.property | null
    createdAt: Date | null
    userId: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    title: number
    images: number
    price: number
    address: number
    city: number
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: number
    property: number
    createdAt: number
    userId: number
    _all: number
  }


  export type PostAvgAggregateInputType = {
    price?: true
    bedroom?: true
    bathroom?: true
    latitude?: true
    longitude?: true
  }

  export type PostSumAggregateInputType = {
    price?: true
    bedroom?: true
    bathroom?: true
    latitude?: true
    longitude?: true
  }

  export type PostMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    address?: true
    city?: true
    bedroom?: true
    bathroom?: true
    latitude?: true
    longitude?: true
    type?: true
    property?: true
    createdAt?: true
    userId?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    address?: true
    city?: true
    bedroom?: true
    bathroom?: true
    latitude?: true
    longitude?: true
    type?: true
    property?: true
    createdAt?: true
    userId?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    title?: true
    images?: true
    price?: true
    address?: true
    city?: true
    bedroom?: true
    bathroom?: true
    latitude?: true
    longitude?: true
    type?: true
    property?: true
    createdAt?: true
    userId?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post to aggregate.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type postGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postWhereInput
    orderBy?: postOrderByWithAggregationInput | postOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: postScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _avg?: PostAvgAggregateInputType
    _sum?: PostSumAggregateInputType
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    title: string
    images: string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt: Date
    userId: string
    _count: PostCountAggregateOutputType | null
    _avg: PostAvgAggregateOutputType | null
    _sum: PostSumAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends postGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type postSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    images?: boolean
    price?: boolean
    address?: boolean
    city?: boolean
    bedroom?: boolean
    bathroom?: boolean
    latitude?: boolean
    longitude?: boolean
    type?: boolean
    property?: boolean
    createdAt?: boolean
    userId?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    postDetail?: boolean | post$postDetailArgs<ExtArgs>
    savedPost?: boolean | post$savedPostArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>


  export type postSelectScalar = {
    id?: boolean
    title?: boolean
    images?: boolean
    price?: boolean
    address?: boolean
    city?: boolean
    bedroom?: boolean
    bathroom?: boolean
    latitude?: boolean
    longitude?: boolean
    type?: boolean
    property?: boolean
    createdAt?: boolean
    userId?: boolean
  }

  export type postInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    postDetail?: boolean | post$postDetailArgs<ExtArgs>
    savedPost?: boolean | post$savedPostArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $postPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      postDetail: Prisma.$postDetailPayload<ExtArgs> | null
      savedPost: Prisma.$savedPostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      images: string[]
      price: number
      address: string
      city: string
      bedroom: number
      bathroom: number
      latitude: number
      longitude: number
      type: $Enums.type
      property: $Enums.property
      createdAt: Date
      userId: string
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type postGetPayload<S extends boolean | null | undefined | postDefaultArgs> = $Result.GetResult<Prisma.$postPayload, S>

  type postCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<postFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface postDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post'], meta: { name: 'post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {postFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends postFindUniqueArgs>(args: SelectSubset<T, postFindUniqueArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {postFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends postFindUniqueOrThrowArgs>(args: SelectSubset<T, postFindUniqueOrThrowArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends postFindFirstArgs>(args?: SelectSubset<T, postFindFirstArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends postFindFirstOrThrowArgs>(args?: SelectSubset<T, postFindFirstOrThrowArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends postFindManyArgs>(args?: SelectSubset<T, postFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Post.
     * @param {postCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends postCreateArgs>(args: SelectSubset<T, postCreateArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Posts.
     * @param {postCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends postCreateManyArgs>(args?: SelectSubset<T, postCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {postDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends postDeleteArgs>(args: SelectSubset<T, postDeleteArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Post.
     * @param {postUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends postUpdateArgs>(args: SelectSubset<T, postUpdateArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {postDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends postDeleteManyArgs>(args?: SelectSubset<T, postDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends postUpdateManyArgs>(args: SelectSubset<T, postUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {postUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends postUpsertArgs>(args: SelectSubset<T, postUpsertArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * @param {postFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const post = await prisma.post.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: postFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Post.
     * @param {postAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const post = await prisma.post.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: postAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends postCountArgs>(
      args?: Subset<T, postCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postGroupByArgs['orderBy'] }
        : { orderBy?: postGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post model
   */
  readonly fields: postFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    postDetail<T extends post$postDetailArgs<ExtArgs> = {}>(args?: Subset<T, post$postDetailArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    savedPost<T extends post$savedPostArgs<ExtArgs> = {}>(args?: Subset<T, post$savedPostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post model
   */ 
  interface postFieldRefs {
    readonly id: FieldRef<"post", 'String'>
    readonly title: FieldRef<"post", 'String'>
    readonly images: FieldRef<"post", 'String[]'>
    readonly price: FieldRef<"post", 'Int'>
    readonly address: FieldRef<"post", 'String'>
    readonly city: FieldRef<"post", 'String'>
    readonly bedroom: FieldRef<"post", 'Int'>
    readonly bathroom: FieldRef<"post", 'Int'>
    readonly latitude: FieldRef<"post", 'Float'>
    readonly longitude: FieldRef<"post", 'Float'>
    readonly type: FieldRef<"post", 'type'>
    readonly property: FieldRef<"post", 'property'>
    readonly createdAt: FieldRef<"post", 'DateTime'>
    readonly userId: FieldRef<"post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * post findUnique
   */
  export type postFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where: postWhereUniqueInput
  }

  /**
   * post findUniqueOrThrow
   */
  export type postFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where: postWhereUniqueInput
  }

  /**
   * post findFirst
   */
  export type postFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post findFirstOrThrow
   */
  export type postFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which post to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post findMany
   */
  export type postFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter, which posts to fetch.
     */
    where?: postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of posts to fetch.
     */
    orderBy?: postOrderByWithRelationInput | postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing posts.
     */
    cursor?: postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * post create
   */
  export type postCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The data needed to create a post.
     */
    data: XOR<postCreateInput, postUncheckedCreateInput>
  }

  /**
   * post createMany
   */
  export type postCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many posts.
     */
    data: postCreateManyInput | postCreateManyInput[]
  }

  /**
   * post update
   */
  export type postUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The data needed to update a post.
     */
    data: XOR<postUpdateInput, postUncheckedUpdateInput>
    /**
     * Choose, which post to update.
     */
    where: postWhereUniqueInput
  }

  /**
   * post updateMany
   */
  export type postUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update posts.
     */
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyInput>
    /**
     * Filter which posts to update
     */
    where?: postWhereInput
  }

  /**
   * post upsert
   */
  export type postUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * The filter to search for the post to update in case it exists.
     */
    where: postWhereUniqueInput
    /**
     * In case the post found by the `where` argument doesn't exist, create a new post with this data.
     */
    create: XOR<postCreateInput, postUncheckedCreateInput>
    /**
     * In case the post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postUpdateInput, postUncheckedUpdateInput>
  }

  /**
   * post delete
   */
  export type postDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
    /**
     * Filter which post to delete.
     */
    where: postWhereUniqueInput
  }

  /**
   * post deleteMany
   */
  export type postDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which posts to delete
     */
    where?: postWhereInput
  }

  /**
   * post findRaw
   */
  export type postFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * post aggregateRaw
   */
  export type postAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * post.postDetail
   */
  export type post$postDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    where?: postDetailWhereInput
  }

  /**
   * post.savedPost
   */
  export type post$savedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    where?: savedPostWhereInput
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    cursor?: savedPostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SavedPostScalarFieldEnum | SavedPostScalarFieldEnum[]
  }

  /**
   * post without action
   */
  export type postDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post
     */
    select?: postSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postInclude<ExtArgs> | null
  }


  /**
   * Model postDetail
   */

  export type AggregatePostDetail = {
    _count: PostDetailCountAggregateOutputType | null
    _avg: PostDetailAvgAggregateOutputType | null
    _sum: PostDetailSumAggregateOutputType | null
    _min: PostDetailMinAggregateOutputType | null
    _max: PostDetailMaxAggregateOutputType | null
  }

  export type PostDetailAvgAggregateOutputType = {
    size: number | null
    school: number | null
    bus: number | null
    restaurant: number | null
  }

  export type PostDetailSumAggregateOutputType = {
    size: number | null
    school: number | null
    bus: number | null
    restaurant: number | null
  }

  export type PostDetailMinAggregateOutputType = {
    id: string | null
    desc: string | null
    size: number | null
    utilities: string | null
    pet: string | null
    income: string | null
    school: number | null
    bus: number | null
    restaurant: number | null
    postId: string | null
  }

  export type PostDetailMaxAggregateOutputType = {
    id: string | null
    desc: string | null
    size: number | null
    utilities: string | null
    pet: string | null
    income: string | null
    school: number | null
    bus: number | null
    restaurant: number | null
    postId: string | null
  }

  export type PostDetailCountAggregateOutputType = {
    id: number
    desc: number
    size: number
    utilities: number
    pet: number
    income: number
    school: number
    bus: number
    restaurant: number
    postId: number
    _all: number
  }


  export type PostDetailAvgAggregateInputType = {
    size?: true
    school?: true
    bus?: true
    restaurant?: true
  }

  export type PostDetailSumAggregateInputType = {
    size?: true
    school?: true
    bus?: true
    restaurant?: true
  }

  export type PostDetailMinAggregateInputType = {
    id?: true
    desc?: true
    size?: true
    utilities?: true
    pet?: true
    income?: true
    school?: true
    bus?: true
    restaurant?: true
    postId?: true
  }

  export type PostDetailMaxAggregateInputType = {
    id?: true
    desc?: true
    size?: true
    utilities?: true
    pet?: true
    income?: true
    school?: true
    bus?: true
    restaurant?: true
    postId?: true
  }

  export type PostDetailCountAggregateInputType = {
    id?: true
    desc?: true
    size?: true
    utilities?: true
    pet?: true
    income?: true
    school?: true
    bus?: true
    restaurant?: true
    postId?: true
    _all?: true
  }

  export type PostDetailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which postDetail to aggregate.
     */
    where?: postDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postDetails to fetch.
     */
    orderBy?: postDetailOrderByWithRelationInput | postDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned postDetails
    **/
    _count?: true | PostDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PostDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PostDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostDetailMaxAggregateInputType
  }

  export type GetPostDetailAggregateType<T extends PostDetailAggregateArgs> = {
        [P in keyof T & keyof AggregatePostDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostDetail[P]>
      : GetScalarType<T[P], AggregatePostDetail[P]>
  }




  export type postDetailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postDetailWhereInput
    orderBy?: postDetailOrderByWithAggregationInput | postDetailOrderByWithAggregationInput[]
    by: PostDetailScalarFieldEnum[] | PostDetailScalarFieldEnum
    having?: postDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostDetailCountAggregateInputType | true
    _avg?: PostDetailAvgAggregateInputType
    _sum?: PostDetailSumAggregateInputType
    _min?: PostDetailMinAggregateInputType
    _max?: PostDetailMaxAggregateInputType
  }

  export type PostDetailGroupByOutputType = {
    id: string
    desc: string
    size: number | null
    utilities: string | null
    pet: string | null
    income: string | null
    school: number | null
    bus: number | null
    restaurant: number | null
    postId: string
    _count: PostDetailCountAggregateOutputType | null
    _avg: PostDetailAvgAggregateOutputType | null
    _sum: PostDetailSumAggregateOutputType | null
    _min: PostDetailMinAggregateOutputType | null
    _max: PostDetailMaxAggregateOutputType | null
  }

  type GetPostDetailGroupByPayload<T extends postDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostDetailGroupByOutputType[P]>
            : GetScalarType<T[P], PostDetailGroupByOutputType[P]>
        }
      >
    >


  export type postDetailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    desc?: boolean
    size?: boolean
    utilities?: boolean
    pet?: boolean
    income?: boolean
    school?: boolean
    bus?: boolean
    restaurant?: boolean
    postId?: boolean
    post?: boolean | postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postDetail"]>


  export type postDetailSelectScalar = {
    id?: boolean
    desc?: boolean
    size?: boolean
    utilities?: boolean
    pet?: boolean
    income?: boolean
    school?: boolean
    bus?: boolean
    restaurant?: boolean
    postId?: boolean
  }

  export type postDetailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | postDefaultArgs<ExtArgs>
  }

  export type $postDetailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "postDetail"
    objects: {
      post: Prisma.$postPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      desc: string
      size: number | null
      utilities: string | null
      pet: string | null
      income: string | null
      school: number | null
      bus: number | null
      restaurant: number | null
      postId: string
    }, ExtArgs["result"]["postDetail"]>
    composites: {}
  }

  type postDetailGetPayload<S extends boolean | null | undefined | postDetailDefaultArgs> = $Result.GetResult<Prisma.$postDetailPayload, S>

  type postDetailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<postDetailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostDetailCountAggregateInputType | true
    }

  export interface postDetailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['postDetail'], meta: { name: 'postDetail' } }
    /**
     * Find zero or one PostDetail that matches the filter.
     * @param {postDetailFindUniqueArgs} args - Arguments to find a PostDetail
     * @example
     * // Get one PostDetail
     * const postDetail = await prisma.postDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends postDetailFindUniqueArgs>(args: SelectSubset<T, postDetailFindUniqueArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PostDetail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {postDetailFindUniqueOrThrowArgs} args - Arguments to find a PostDetail
     * @example
     * // Get one PostDetail
     * const postDetail = await prisma.postDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends postDetailFindUniqueOrThrowArgs>(args: SelectSubset<T, postDetailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PostDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailFindFirstArgs} args - Arguments to find a PostDetail
     * @example
     * // Get one PostDetail
     * const postDetail = await prisma.postDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends postDetailFindFirstArgs>(args?: SelectSubset<T, postDetailFindFirstArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PostDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailFindFirstOrThrowArgs} args - Arguments to find a PostDetail
     * @example
     * // Get one PostDetail
     * const postDetail = await prisma.postDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends postDetailFindFirstOrThrowArgs>(args?: SelectSubset<T, postDetailFindFirstOrThrowArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PostDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostDetails
     * const postDetails = await prisma.postDetail.findMany()
     * 
     * // Get first 10 PostDetails
     * const postDetails = await prisma.postDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postDetailWithIdOnly = await prisma.postDetail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends postDetailFindManyArgs>(args?: SelectSubset<T, postDetailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PostDetail.
     * @param {postDetailCreateArgs} args - Arguments to create a PostDetail.
     * @example
     * // Create one PostDetail
     * const PostDetail = await prisma.postDetail.create({
     *   data: {
     *     // ... data to create a PostDetail
     *   }
     * })
     * 
     */
    create<T extends postDetailCreateArgs>(args: SelectSubset<T, postDetailCreateArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PostDetails.
     * @param {postDetailCreateManyArgs} args - Arguments to create many PostDetails.
     * @example
     * // Create many PostDetails
     * const postDetail = await prisma.postDetail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends postDetailCreateManyArgs>(args?: SelectSubset<T, postDetailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostDetail.
     * @param {postDetailDeleteArgs} args - Arguments to delete one PostDetail.
     * @example
     * // Delete one PostDetail
     * const PostDetail = await prisma.postDetail.delete({
     *   where: {
     *     // ... filter to delete one PostDetail
     *   }
     * })
     * 
     */
    delete<T extends postDetailDeleteArgs>(args: SelectSubset<T, postDetailDeleteArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PostDetail.
     * @param {postDetailUpdateArgs} args - Arguments to update one PostDetail.
     * @example
     * // Update one PostDetail
     * const postDetail = await prisma.postDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends postDetailUpdateArgs>(args: SelectSubset<T, postDetailUpdateArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PostDetails.
     * @param {postDetailDeleteManyArgs} args - Arguments to filter PostDetails to delete.
     * @example
     * // Delete a few PostDetails
     * const { count } = await prisma.postDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends postDetailDeleteManyArgs>(args?: SelectSubset<T, postDetailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostDetails
     * const postDetail = await prisma.postDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends postDetailUpdateManyArgs>(args: SelectSubset<T, postDetailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostDetail.
     * @param {postDetailUpsertArgs} args - Arguments to update or create a PostDetail.
     * @example
     * // Update or create a PostDetail
     * const postDetail = await prisma.postDetail.upsert({
     *   create: {
     *     // ... data to create a PostDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostDetail we want to update
     *   }
     * })
     */
    upsert<T extends postDetailUpsertArgs>(args: SelectSubset<T, postDetailUpsertArgs<ExtArgs>>): Prisma__postDetailClient<$Result.GetResult<Prisma.$postDetailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more PostDetails that matches the filter.
     * @param {postDetailFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const postDetail = await prisma.postDetail.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: postDetailFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a PostDetail.
     * @param {postDetailAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const postDetail = await prisma.postDetail.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: postDetailAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of PostDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailCountArgs} args - Arguments to filter PostDetails to count.
     * @example
     * // Count the number of PostDetails
     * const count = await prisma.postDetail.count({
     *   where: {
     *     // ... the filter for the PostDetails we want to count
     *   }
     * })
    **/
    count<T extends postDetailCountArgs>(
      args?: Subset<T, postDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostDetailAggregateArgs>(args: Subset<T, PostDetailAggregateArgs>): Prisma.PrismaPromise<GetPostDetailAggregateType<T>>

    /**
     * Group by PostDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postDetailGroupByArgs['orderBy'] }
        : { orderBy?: postDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the postDetail model
   */
  readonly fields: postDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for postDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postDetailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, postDefaultArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the postDetail model
   */ 
  interface postDetailFieldRefs {
    readonly id: FieldRef<"postDetail", 'String'>
    readonly desc: FieldRef<"postDetail", 'String'>
    readonly size: FieldRef<"postDetail", 'Int'>
    readonly utilities: FieldRef<"postDetail", 'String'>
    readonly pet: FieldRef<"postDetail", 'String'>
    readonly income: FieldRef<"postDetail", 'String'>
    readonly school: FieldRef<"postDetail", 'Int'>
    readonly bus: FieldRef<"postDetail", 'Int'>
    readonly restaurant: FieldRef<"postDetail", 'Int'>
    readonly postId: FieldRef<"postDetail", 'String'>
  }
    

  // Custom InputTypes
  /**
   * postDetail findUnique
   */
  export type postDetailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter, which postDetail to fetch.
     */
    where: postDetailWhereUniqueInput
  }

  /**
   * postDetail findUniqueOrThrow
   */
  export type postDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter, which postDetail to fetch.
     */
    where: postDetailWhereUniqueInput
  }

  /**
   * postDetail findFirst
   */
  export type postDetailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter, which postDetail to fetch.
     */
    where?: postDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postDetails to fetch.
     */
    orderBy?: postDetailOrderByWithRelationInput | postDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postDetails.
     */
    cursor?: postDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postDetails.
     */
    distinct?: PostDetailScalarFieldEnum | PostDetailScalarFieldEnum[]
  }

  /**
   * postDetail findFirstOrThrow
   */
  export type postDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter, which postDetail to fetch.
     */
    where?: postDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postDetails to fetch.
     */
    orderBy?: postDetailOrderByWithRelationInput | postDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postDetails.
     */
    cursor?: postDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postDetails.
     */
    distinct?: PostDetailScalarFieldEnum | PostDetailScalarFieldEnum[]
  }

  /**
   * postDetail findMany
   */
  export type postDetailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter, which postDetails to fetch.
     */
    where?: postDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postDetails to fetch.
     */
    orderBy?: postDetailOrderByWithRelationInput | postDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing postDetails.
     */
    cursor?: postDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postDetails.
     */
    skip?: number
    distinct?: PostDetailScalarFieldEnum | PostDetailScalarFieldEnum[]
  }

  /**
   * postDetail create
   */
  export type postDetailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a postDetail.
     */
    data: XOR<postDetailCreateInput, postDetailUncheckedCreateInput>
  }

  /**
   * postDetail createMany
   */
  export type postDetailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many postDetails.
     */
    data: postDetailCreateManyInput | postDetailCreateManyInput[]
  }

  /**
   * postDetail update
   */
  export type postDetailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a postDetail.
     */
    data: XOR<postDetailUpdateInput, postDetailUncheckedUpdateInput>
    /**
     * Choose, which postDetail to update.
     */
    where: postDetailWhereUniqueInput
  }

  /**
   * postDetail updateMany
   */
  export type postDetailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update postDetails.
     */
    data: XOR<postDetailUpdateManyMutationInput, postDetailUncheckedUpdateManyInput>
    /**
     * Filter which postDetails to update
     */
    where?: postDetailWhereInput
  }

  /**
   * postDetail upsert
   */
  export type postDetailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the postDetail to update in case it exists.
     */
    where: postDetailWhereUniqueInput
    /**
     * In case the postDetail found by the `where` argument doesn't exist, create a new postDetail with this data.
     */
    create: XOR<postDetailCreateInput, postDetailUncheckedCreateInput>
    /**
     * In case the postDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postDetailUpdateInput, postDetailUncheckedUpdateInput>
  }

  /**
   * postDetail delete
   */
  export type postDetailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
    /**
     * Filter which postDetail to delete.
     */
    where: postDetailWhereUniqueInput
  }

  /**
   * postDetail deleteMany
   */
  export type postDetailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which postDetails to delete
     */
    where?: postDetailWhereInput
  }

  /**
   * postDetail findRaw
   */
  export type postDetailFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * postDetail aggregateRaw
   */
  export type postDetailAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * postDetail without action
   */
  export type postDetailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the postDetail
     */
    select?: postDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postDetailInclude<ExtArgs> | null
  }


  /**
   * Model savedPost
   */

  export type AggregateSavedPost = {
    _count: SavedPostCountAggregateOutputType | null
    _min: SavedPostMinAggregateOutputType | null
    _max: SavedPostMaxAggregateOutputType | null
  }

  export type SavedPostMinAggregateOutputType = {
    id: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
  }

  export type SavedPostMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    postId: string | null
    createdAt: Date | null
  }

  export type SavedPostCountAggregateOutputType = {
    id: number
    userId: number
    postId: number
    createdAt: number
    _all: number
  }


  export type SavedPostMinAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
  }

  export type SavedPostMaxAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
  }

  export type SavedPostCountAggregateInputType = {
    id?: true
    userId?: true
    postId?: true
    createdAt?: true
    _all?: true
  }

  export type SavedPostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which savedPost to aggregate.
     */
    where?: savedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of savedPosts to fetch.
     */
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: savedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` savedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` savedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned savedPosts
    **/
    _count?: true | SavedPostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SavedPostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SavedPostMaxAggregateInputType
  }

  export type GetSavedPostAggregateType<T extends SavedPostAggregateArgs> = {
        [P in keyof T & keyof AggregateSavedPost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSavedPost[P]>
      : GetScalarType<T[P], AggregateSavedPost[P]>
  }




  export type savedPostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: savedPostWhereInput
    orderBy?: savedPostOrderByWithAggregationInput | savedPostOrderByWithAggregationInput[]
    by: SavedPostScalarFieldEnum[] | SavedPostScalarFieldEnum
    having?: savedPostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SavedPostCountAggregateInputType | true
    _min?: SavedPostMinAggregateInputType
    _max?: SavedPostMaxAggregateInputType
  }

  export type SavedPostGroupByOutputType = {
    id: string
    userId: string
    postId: string
    createdAt: Date
    _count: SavedPostCountAggregateOutputType | null
    _min: SavedPostMinAggregateOutputType | null
    _max: SavedPostMaxAggregateOutputType | null
  }

  type GetSavedPostGroupByPayload<T extends savedPostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SavedPostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SavedPostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SavedPostGroupByOutputType[P]>
            : GetScalarType<T[P], SavedPostGroupByOutputType[P]>
        }
      >
    >


  export type savedPostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
    user?: boolean | userDefaultArgs<ExtArgs>
    post?: boolean | postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["savedPost"]>


  export type savedPostSelectScalar = {
    id?: boolean
    userId?: boolean
    postId?: boolean
    createdAt?: boolean
  }

  export type savedPostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | userDefaultArgs<ExtArgs>
    post?: boolean | postDefaultArgs<ExtArgs>
  }

  export type $savedPostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "savedPost"
    objects: {
      user: Prisma.$userPayload<ExtArgs>
      post: Prisma.$postPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      postId: string
      createdAt: Date
    }, ExtArgs["result"]["savedPost"]>
    composites: {}
  }

  type savedPostGetPayload<S extends boolean | null | undefined | savedPostDefaultArgs> = $Result.GetResult<Prisma.$savedPostPayload, S>

  type savedPostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<savedPostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SavedPostCountAggregateInputType | true
    }

  export interface savedPostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['savedPost'], meta: { name: 'savedPost' } }
    /**
     * Find zero or one SavedPost that matches the filter.
     * @param {savedPostFindUniqueArgs} args - Arguments to find a SavedPost
     * @example
     * // Get one SavedPost
     * const savedPost = await prisma.savedPost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends savedPostFindUniqueArgs>(args: SelectSubset<T, savedPostFindUniqueArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SavedPost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {savedPostFindUniqueOrThrowArgs} args - Arguments to find a SavedPost
     * @example
     * // Get one SavedPost
     * const savedPost = await prisma.savedPost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends savedPostFindUniqueOrThrowArgs>(args: SelectSubset<T, savedPostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SavedPost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostFindFirstArgs} args - Arguments to find a SavedPost
     * @example
     * // Get one SavedPost
     * const savedPost = await prisma.savedPost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends savedPostFindFirstArgs>(args?: SelectSubset<T, savedPostFindFirstArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SavedPost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostFindFirstOrThrowArgs} args - Arguments to find a SavedPost
     * @example
     * // Get one SavedPost
     * const savedPost = await prisma.savedPost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends savedPostFindFirstOrThrowArgs>(args?: SelectSubset<T, savedPostFindFirstOrThrowArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SavedPosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SavedPosts
     * const savedPosts = await prisma.savedPost.findMany()
     * 
     * // Get first 10 SavedPosts
     * const savedPosts = await prisma.savedPost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const savedPostWithIdOnly = await prisma.savedPost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends savedPostFindManyArgs>(args?: SelectSubset<T, savedPostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SavedPost.
     * @param {savedPostCreateArgs} args - Arguments to create a SavedPost.
     * @example
     * // Create one SavedPost
     * const SavedPost = await prisma.savedPost.create({
     *   data: {
     *     // ... data to create a SavedPost
     *   }
     * })
     * 
     */
    create<T extends savedPostCreateArgs>(args: SelectSubset<T, savedPostCreateArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SavedPosts.
     * @param {savedPostCreateManyArgs} args - Arguments to create many SavedPosts.
     * @example
     * // Create many SavedPosts
     * const savedPost = await prisma.savedPost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends savedPostCreateManyArgs>(args?: SelectSubset<T, savedPostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SavedPost.
     * @param {savedPostDeleteArgs} args - Arguments to delete one SavedPost.
     * @example
     * // Delete one SavedPost
     * const SavedPost = await prisma.savedPost.delete({
     *   where: {
     *     // ... filter to delete one SavedPost
     *   }
     * })
     * 
     */
    delete<T extends savedPostDeleteArgs>(args: SelectSubset<T, savedPostDeleteArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SavedPost.
     * @param {savedPostUpdateArgs} args - Arguments to update one SavedPost.
     * @example
     * // Update one SavedPost
     * const savedPost = await prisma.savedPost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends savedPostUpdateArgs>(args: SelectSubset<T, savedPostUpdateArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SavedPosts.
     * @param {savedPostDeleteManyArgs} args - Arguments to filter SavedPosts to delete.
     * @example
     * // Delete a few SavedPosts
     * const { count } = await prisma.savedPost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends savedPostDeleteManyArgs>(args?: SelectSubset<T, savedPostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SavedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SavedPosts
     * const savedPost = await prisma.savedPost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends savedPostUpdateManyArgs>(args: SelectSubset<T, savedPostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SavedPost.
     * @param {savedPostUpsertArgs} args - Arguments to update or create a SavedPost.
     * @example
     * // Update or create a SavedPost
     * const savedPost = await prisma.savedPost.upsert({
     *   create: {
     *     // ... data to create a SavedPost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SavedPost we want to update
     *   }
     * })
     */
    upsert<T extends savedPostUpsertArgs>(args: SelectSubset<T, savedPostUpsertArgs<ExtArgs>>): Prisma__savedPostClient<$Result.GetResult<Prisma.$savedPostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more SavedPosts that matches the filter.
     * @param {savedPostFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const savedPost = await prisma.savedPost.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: savedPostFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a SavedPost.
     * @param {savedPostAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const savedPost = await prisma.savedPost.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: savedPostAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of SavedPosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostCountArgs} args - Arguments to filter SavedPosts to count.
     * @example
     * // Count the number of SavedPosts
     * const count = await prisma.savedPost.count({
     *   where: {
     *     // ... the filter for the SavedPosts we want to count
     *   }
     * })
    **/
    count<T extends savedPostCountArgs>(
      args?: Subset<T, savedPostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SavedPostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SavedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SavedPostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SavedPostAggregateArgs>(args: Subset<T, SavedPostAggregateArgs>): Prisma.PrismaPromise<GetSavedPostAggregateType<T>>

    /**
     * Group by SavedPost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {savedPostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends savedPostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: savedPostGroupByArgs['orderBy'] }
        : { orderBy?: savedPostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, savedPostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSavedPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the savedPost model
   */
  readonly fields: savedPostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for savedPost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__savedPostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    post<T extends postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, postDefaultArgs<ExtArgs>>): Prisma__postClient<$Result.GetResult<Prisma.$postPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the savedPost model
   */ 
  interface savedPostFieldRefs {
    readonly id: FieldRef<"savedPost", 'String'>
    readonly userId: FieldRef<"savedPost", 'String'>
    readonly postId: FieldRef<"savedPost", 'String'>
    readonly createdAt: FieldRef<"savedPost", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * savedPost findUnique
   */
  export type savedPostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter, which savedPost to fetch.
     */
    where: savedPostWhereUniqueInput
  }

  /**
   * savedPost findUniqueOrThrow
   */
  export type savedPostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter, which savedPost to fetch.
     */
    where: savedPostWhereUniqueInput
  }

  /**
   * savedPost findFirst
   */
  export type savedPostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter, which savedPost to fetch.
     */
    where?: savedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of savedPosts to fetch.
     */
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for savedPosts.
     */
    cursor?: savedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` savedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` savedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of savedPosts.
     */
    distinct?: SavedPostScalarFieldEnum | SavedPostScalarFieldEnum[]
  }

  /**
   * savedPost findFirstOrThrow
   */
  export type savedPostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter, which savedPost to fetch.
     */
    where?: savedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of savedPosts to fetch.
     */
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for savedPosts.
     */
    cursor?: savedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` savedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` savedPosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of savedPosts.
     */
    distinct?: SavedPostScalarFieldEnum | SavedPostScalarFieldEnum[]
  }

  /**
   * savedPost findMany
   */
  export type savedPostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter, which savedPosts to fetch.
     */
    where?: savedPostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of savedPosts to fetch.
     */
    orderBy?: savedPostOrderByWithRelationInput | savedPostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing savedPosts.
     */
    cursor?: savedPostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` savedPosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` savedPosts.
     */
    skip?: number
    distinct?: SavedPostScalarFieldEnum | SavedPostScalarFieldEnum[]
  }

  /**
   * savedPost create
   */
  export type savedPostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * The data needed to create a savedPost.
     */
    data: XOR<savedPostCreateInput, savedPostUncheckedCreateInput>
  }

  /**
   * savedPost createMany
   */
  export type savedPostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many savedPosts.
     */
    data: savedPostCreateManyInput | savedPostCreateManyInput[]
  }

  /**
   * savedPost update
   */
  export type savedPostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * The data needed to update a savedPost.
     */
    data: XOR<savedPostUpdateInput, savedPostUncheckedUpdateInput>
    /**
     * Choose, which savedPost to update.
     */
    where: savedPostWhereUniqueInput
  }

  /**
   * savedPost updateMany
   */
  export type savedPostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update savedPosts.
     */
    data: XOR<savedPostUpdateManyMutationInput, savedPostUncheckedUpdateManyInput>
    /**
     * Filter which savedPosts to update
     */
    where?: savedPostWhereInput
  }

  /**
   * savedPost upsert
   */
  export type savedPostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * The filter to search for the savedPost to update in case it exists.
     */
    where: savedPostWhereUniqueInput
    /**
     * In case the savedPost found by the `where` argument doesn't exist, create a new savedPost with this data.
     */
    create: XOR<savedPostCreateInput, savedPostUncheckedCreateInput>
    /**
     * In case the savedPost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<savedPostUpdateInput, savedPostUncheckedUpdateInput>
  }

  /**
   * savedPost delete
   */
  export type savedPostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
    /**
     * Filter which savedPost to delete.
     */
    where: savedPostWhereUniqueInput
  }

  /**
   * savedPost deleteMany
   */
  export type savedPostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which savedPosts to delete
     */
    where?: savedPostWhereInput
  }

  /**
   * savedPost findRaw
   */
  export type savedPostFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * savedPost aggregateRaw
   */
  export type savedPostAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * savedPost without action
   */
  export type savedPostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the savedPost
     */
    select?: savedPostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: savedPostInclude<ExtArgs> | null
  }


  /**
   * Model chat
   */

  export type AggregateChat = {
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  export type ChatMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    lastMessage: string | null
  }

  export type ChatMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    lastMessage: string | null
  }

  export type ChatCountAggregateOutputType = {
    id: number
    userIds: number
    createdAt: number
    seenBy: number
    lastMessage: number
    _all: number
  }


  export type ChatMinAggregateInputType = {
    id?: true
    createdAt?: true
    lastMessage?: true
  }

  export type ChatMaxAggregateInputType = {
    id?: true
    createdAt?: true
    lastMessage?: true
  }

  export type ChatCountAggregateInputType = {
    id?: true
    userIds?: true
    createdAt?: true
    seenBy?: true
    lastMessage?: true
    _all?: true
  }

  export type ChatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chat to aggregate.
     */
    where?: chatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chats to fetch.
     */
    orderBy?: chatOrderByWithRelationInput | chatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chats
    **/
    _count?: true | ChatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatMaxAggregateInputType
  }

  export type GetChatAggregateType<T extends ChatAggregateArgs> = {
        [P in keyof T & keyof AggregateChat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChat[P]>
      : GetScalarType<T[P], AggregateChat[P]>
  }




  export type chatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chatWhereInput
    orderBy?: chatOrderByWithAggregationInput | chatOrderByWithAggregationInput[]
    by: ChatScalarFieldEnum[] | ChatScalarFieldEnum
    having?: chatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatCountAggregateInputType | true
    _min?: ChatMinAggregateInputType
    _max?: ChatMaxAggregateInputType
  }

  export type ChatGroupByOutputType = {
    id: string
    userIds: string[]
    createdAt: Date
    seenBy: string[]
    lastMessage: string | null
    _count: ChatCountAggregateOutputType | null
    _min: ChatMinAggregateOutputType | null
    _max: ChatMaxAggregateOutputType | null
  }

  type GetChatGroupByPayload<T extends chatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatGroupByOutputType[P]>
            : GetScalarType<T[P], ChatGroupByOutputType[P]>
        }
      >
    >


  export type chatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userIds?: boolean
    createdAt?: boolean
    seenBy?: boolean
    lastMessage?: boolean
    users?: boolean | chat$usersArgs<ExtArgs>
    message?: boolean | chat$messageArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chat"]>


  export type chatSelectScalar = {
    id?: boolean
    userIds?: boolean
    createdAt?: boolean
    seenBy?: boolean
    lastMessage?: boolean
  }

  export type chatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | chat$usersArgs<ExtArgs>
    message?: boolean | chat$messageArgs<ExtArgs>
    _count?: boolean | ChatCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $chatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chat"
    objects: {
      users: Prisma.$userPayload<ExtArgs>[]
      message: Prisma.$messagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userIds: string[]
      createdAt: Date
      seenBy: string[]
      lastMessage: string | null
    }, ExtArgs["result"]["chat"]>
    composites: {}
  }

  type chatGetPayload<S extends boolean | null | undefined | chatDefaultArgs> = $Result.GetResult<Prisma.$chatPayload, S>

  type chatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<chatFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatCountAggregateInputType | true
    }

  export interface chatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chat'], meta: { name: 'chat' } }
    /**
     * Find zero or one Chat that matches the filter.
     * @param {chatFindUniqueArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends chatFindUniqueArgs>(args: SelectSubset<T, chatFindUniqueArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Chat that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {chatFindUniqueOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends chatFindUniqueOrThrowArgs>(args: SelectSubset<T, chatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Chat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatFindFirstArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends chatFindFirstArgs>(args?: SelectSubset<T, chatFindFirstArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Chat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatFindFirstOrThrowArgs} args - Arguments to find a Chat
     * @example
     * // Get one Chat
     * const chat = await prisma.chat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends chatFindFirstOrThrowArgs>(args?: SelectSubset<T, chatFindFirstOrThrowArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Chats
     * const chats = await prisma.chat.findMany()
     * 
     * // Get first 10 Chats
     * const chats = await prisma.chat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const chatWithIdOnly = await prisma.chat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends chatFindManyArgs>(args?: SelectSubset<T, chatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Chat.
     * @param {chatCreateArgs} args - Arguments to create a Chat.
     * @example
     * // Create one Chat
     * const Chat = await prisma.chat.create({
     *   data: {
     *     // ... data to create a Chat
     *   }
     * })
     * 
     */
    create<T extends chatCreateArgs>(args: SelectSubset<T, chatCreateArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Chats.
     * @param {chatCreateManyArgs} args - Arguments to create many Chats.
     * @example
     * // Create many Chats
     * const chat = await prisma.chat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends chatCreateManyArgs>(args?: SelectSubset<T, chatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Chat.
     * @param {chatDeleteArgs} args - Arguments to delete one Chat.
     * @example
     * // Delete one Chat
     * const Chat = await prisma.chat.delete({
     *   where: {
     *     // ... filter to delete one Chat
     *   }
     * })
     * 
     */
    delete<T extends chatDeleteArgs>(args: SelectSubset<T, chatDeleteArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Chat.
     * @param {chatUpdateArgs} args - Arguments to update one Chat.
     * @example
     * // Update one Chat
     * const chat = await prisma.chat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends chatUpdateArgs>(args: SelectSubset<T, chatUpdateArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Chats.
     * @param {chatDeleteManyArgs} args - Arguments to filter Chats to delete.
     * @example
     * // Delete a few Chats
     * const { count } = await prisma.chat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends chatDeleteManyArgs>(args?: SelectSubset<T, chatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Chats
     * const chat = await prisma.chat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends chatUpdateManyArgs>(args: SelectSubset<T, chatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Chat.
     * @param {chatUpsertArgs} args - Arguments to update or create a Chat.
     * @example
     * // Update or create a Chat
     * const chat = await prisma.chat.upsert({
     *   create: {
     *     // ... data to create a Chat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Chat we want to update
     *   }
     * })
     */
    upsert<T extends chatUpsertArgs>(args: SelectSubset<T, chatUpsertArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Chats that matches the filter.
     * @param {chatFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const chat = await prisma.chat.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: chatFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Chat.
     * @param {chatAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const chat = await prisma.chat.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: chatAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Chats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatCountArgs} args - Arguments to filter Chats to count.
     * @example
     * // Count the number of Chats
     * const count = await prisma.chat.count({
     *   where: {
     *     // ... the filter for the Chats we want to count
     *   }
     * })
    **/
    count<T extends chatCountArgs>(
      args?: Subset<T, chatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatAggregateArgs>(args: Subset<T, ChatAggregateArgs>): Prisma.PrismaPromise<GetChatAggregateType<T>>

    /**
     * Group by Chat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chatGroupByArgs['orderBy'] }
        : { orderBy?: chatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chat model
   */
  readonly fields: chatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends chat$usersArgs<ExtArgs> = {}>(args?: Subset<T, chat$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany"> | Null>
    message<T extends chat$messageArgs<ExtArgs> = {}>(args?: Subset<T, chat$messageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the chat model
   */ 
  interface chatFieldRefs {
    readonly id: FieldRef<"chat", 'String'>
    readonly userIds: FieldRef<"chat", 'String[]'>
    readonly createdAt: FieldRef<"chat", 'DateTime'>
    readonly seenBy: FieldRef<"chat", 'String[]'>
    readonly lastMessage: FieldRef<"chat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * chat findUnique
   */
  export type chatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter, which chat to fetch.
     */
    where: chatWhereUniqueInput
  }

  /**
   * chat findUniqueOrThrow
   */
  export type chatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter, which chat to fetch.
     */
    where: chatWhereUniqueInput
  }

  /**
   * chat findFirst
   */
  export type chatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter, which chat to fetch.
     */
    where?: chatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chats to fetch.
     */
    orderBy?: chatOrderByWithRelationInput | chatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chats.
     */
    cursor?: chatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * chat findFirstOrThrow
   */
  export type chatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter, which chat to fetch.
     */
    where?: chatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chats to fetch.
     */
    orderBy?: chatOrderByWithRelationInput | chatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chats.
     */
    cursor?: chatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chats.
     */
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * chat findMany
   */
  export type chatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter, which chats to fetch.
     */
    where?: chatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chats to fetch.
     */
    orderBy?: chatOrderByWithRelationInput | chatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chats.
     */
    cursor?: chatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chats.
     */
    skip?: number
    distinct?: ChatScalarFieldEnum | ChatScalarFieldEnum[]
  }

  /**
   * chat create
   */
  export type chatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * The data needed to create a chat.
     */
    data?: XOR<chatCreateInput, chatUncheckedCreateInput>
  }

  /**
   * chat createMany
   */
  export type chatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chats.
     */
    data: chatCreateManyInput | chatCreateManyInput[]
  }

  /**
   * chat update
   */
  export type chatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * The data needed to update a chat.
     */
    data: XOR<chatUpdateInput, chatUncheckedUpdateInput>
    /**
     * Choose, which chat to update.
     */
    where: chatWhereUniqueInput
  }

  /**
   * chat updateMany
   */
  export type chatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chats.
     */
    data: XOR<chatUpdateManyMutationInput, chatUncheckedUpdateManyInput>
    /**
     * Filter which chats to update
     */
    where?: chatWhereInput
  }

  /**
   * chat upsert
   */
  export type chatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * The filter to search for the chat to update in case it exists.
     */
    where: chatWhereUniqueInput
    /**
     * In case the chat found by the `where` argument doesn't exist, create a new chat with this data.
     */
    create: XOR<chatCreateInput, chatUncheckedCreateInput>
    /**
     * In case the chat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chatUpdateInput, chatUncheckedUpdateInput>
  }

  /**
   * chat delete
   */
  export type chatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
    /**
     * Filter which chat to delete.
     */
    where: chatWhereUniqueInput
  }

  /**
   * chat deleteMany
   */
  export type chatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chats to delete
     */
    where?: chatWhereInput
  }

  /**
   * chat findRaw
   */
  export type chatFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * chat aggregateRaw
   */
  export type chatAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * chat.users
   */
  export type chat$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    where?: userWhereInput
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    cursor?: userWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * chat.message
   */
  export type chat$messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * chat without action
   */
  export type chatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chat
     */
    select?: chatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatInclude<ExtArgs> | null
  }


  /**
   * Model message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    chatId: string | null
    createdAt: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    text: string | null
    userId: string | null
    chatId: string | null
    createdAt: Date | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    text: number
    userId: number
    chatId: number
    createdAt: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    chatId?: true
    createdAt?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    chatId?: true
    createdAt?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    text?: true
    userId?: true
    chatId?: true
    createdAt?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which message to aggregate.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type messageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
    orderBy?: messageOrderByWithAggregationInput | messageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    text: string
    userId: string
    chatId: string
    createdAt: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends messageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    userId?: boolean
    chatId?: boolean
    createdAt?: boolean
    chat?: boolean | chatDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>


  export type messageSelectScalar = {
    id?: boolean
    text?: boolean
    userId?: boolean
    chatId?: boolean
    createdAt?: boolean
  }

  export type messageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chat?: boolean | chatDefaultArgs<ExtArgs>
  }

  export type $messagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "message"
    objects: {
      chat: Prisma.$chatPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      userId: string
      chatId: string
      createdAt: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type messageGetPayload<S extends boolean | null | undefined | messageDefaultArgs> = $Result.GetResult<Prisma.$messagePayload, S>

  type messageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<messageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface messageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['message'], meta: { name: 'message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends messageFindUniqueArgs>(args: SelectSubset<T, messageFindUniqueArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs>(args: SelectSubset<T, messageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends messageFindFirstArgs>(args?: SelectSubset<T, messageFindFirstArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs>(args?: SelectSubset<T, messageFindFirstOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends messageFindManyArgs>(args?: SelectSubset<T, messageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends messageCreateArgs>(args: SelectSubset<T, messageCreateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {messageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends messageCreateManyArgs>(args?: SelectSubset<T, messageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends messageDeleteArgs>(args: SelectSubset<T, messageDeleteArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends messageUpdateArgs>(args: SelectSubset<T, messageUpdateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends messageDeleteManyArgs>(args?: SelectSubset<T, messageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends messageUpdateManyArgs>(args: SelectSubset<T, messageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends messageUpsertArgs>(args: SelectSubset<T, messageUpsertArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * @param {messageFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const message = await prisma.message.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
     */
    findRaw(args?: messageFindRawArgs): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Message.
     * @param {messageAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const message = await prisma.message.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
     */
    aggregateRaw(args?: messageAggregateRawArgs): Prisma.PrismaPromise<JsonObject>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messageGroupByArgs['orderBy'] }
        : { orderBy?: messageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the message model
   */
  readonly fields: messageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__messageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chat<T extends chatDefaultArgs<ExtArgs> = {}>(args?: Subset<T, chatDefaultArgs<ExtArgs>>): Prisma__chatClient<$Result.GetResult<Prisma.$chatPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the message model
   */ 
  interface messageFieldRefs {
    readonly id: FieldRef<"message", 'String'>
    readonly text: FieldRef<"message", 'String'>
    readonly userId: FieldRef<"message", 'String'>
    readonly chatId: FieldRef<"message", 'String'>
    readonly createdAt: FieldRef<"message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * message findUnique
   */
  export type messageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findFirst
   */
  export type messageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findMany
   */
  export type messageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message create
   */
  export type messageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to create a message.
     */
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }

  /**
   * message createMany
   */
  export type messageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
  }

  /**
   * message update
   */
  export type messageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to update a message.
     */
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message updateMany
   */
  export type messageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
  }

  /**
   * message upsert
   */
  export type messageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The filter to search for the message to update in case it exists.
     */
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     */
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }

  /**
   * message delete
   */
  export type messageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter which message to delete.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messageWhereInput
  }

  /**
   * message findRaw
   */
  export type messageFindRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * message aggregateRaw
   */
  export type messageAggregateRawArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }

  /**
   * message without action
   */
  export type messageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    password: 'password',
    profilePic: 'profilePic',
    createdAt: 'createdAt',
    chatIds: 'chatIds'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    title: 'title',
    images: 'images',
    price: 'price',
    address: 'address',
    city: 'city',
    bedroom: 'bedroom',
    bathroom: 'bathroom',
    latitude: 'latitude',
    longitude: 'longitude',
    type: 'type',
    property: 'property',
    createdAt: 'createdAt',
    userId: 'userId'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const PostDetailScalarFieldEnum: {
    id: 'id',
    desc: 'desc',
    size: 'size',
    utilities: 'utilities',
    pet: 'pet',
    income: 'income',
    school: 'school',
    bus: 'bus',
    restaurant: 'restaurant',
    postId: 'postId'
  };

  export type PostDetailScalarFieldEnum = (typeof PostDetailScalarFieldEnum)[keyof typeof PostDetailScalarFieldEnum]


  export const SavedPostScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    postId: 'postId',
    createdAt: 'createdAt'
  };

  export type SavedPostScalarFieldEnum = (typeof SavedPostScalarFieldEnum)[keyof typeof SavedPostScalarFieldEnum]


  export const ChatScalarFieldEnum: {
    id: 'id',
    userIds: 'userIds',
    createdAt: 'createdAt',
    seenBy: 'seenBy',
    lastMessage: 'lastMessage'
  };

  export type ChatScalarFieldEnum = (typeof ChatScalarFieldEnum)[keyof typeof ChatScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    text: 'text',
    userId: 'userId',
    chatId: 'chatId',
    createdAt: 'createdAt'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'type'
   */
  export type EnumtypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'type'>
    


  /**
   * Reference to a field of type 'type[]'
   */
  export type ListEnumtypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'type[]'>
    


  /**
   * Reference to a field of type 'property'
   */
  export type EnumpropertyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'property'>
    


  /**
   * Reference to a field of type 'property[]'
   */
  export type ListEnumpropertyFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'property[]'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    chatIds?: StringNullableListFilter<"user">
    posts?: PostListRelationFilter
    savedPost?: SavedPostListRelationFilter
    chats?: ChatListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    chatIds?: SortOrder
    posts?: postOrderByRelationAggregateInput
    savedPost?: savedPostOrderByRelationAggregateInput
    chats?: chatOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    password?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    chatIds?: StringNullableListFilter<"user">
    posts?: PostListRelationFilter
    savedPost?: SavedPostListRelationFilter
    chats?: ChatListRelationFilter
  }, "id" | "email" | "username">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    chatIds?: SortOrder
    _count?: userCountOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    username?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    profilePic?: StringNullableWithAggregatesFilter<"user"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
    chatIds?: StringNullableListFilter<"user">
  }

  export type postWhereInput = {
    AND?: postWhereInput | postWhereInput[]
    OR?: postWhereInput[]
    NOT?: postWhereInput | postWhereInput[]
    id?: StringFilter<"post"> | string
    title?: StringFilter<"post"> | string
    images?: StringNullableListFilter<"post">
    price?: IntFilter<"post"> | number
    address?: StringFilter<"post"> | string
    city?: StringFilter<"post"> | string
    bedroom?: IntFilter<"post"> | number
    bathroom?: IntFilter<"post"> | number
    latitude?: FloatFilter<"post"> | number
    longitude?: FloatFilter<"post"> | number
    type?: EnumtypeFilter<"post"> | $Enums.type
    property?: EnumpropertyFilter<"post"> | $Enums.property
    createdAt?: DateTimeFilter<"post"> | Date | string
    userId?: StringFilter<"post"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    postDetail?: XOR<PostDetailNullableRelationFilter, postDetailWhereInput> | null
    savedPost?: SavedPostListRelationFilter
  }

  export type postOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    images?: SortOrder
    price?: SortOrder
    address?: SortOrder
    city?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    type?: SortOrder
    property?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    user?: userOrderByWithRelationInput
    postDetail?: postDetailOrderByWithRelationInput
    savedPost?: savedPostOrderByRelationAggregateInput
  }

  export type postWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: postWhereInput | postWhereInput[]
    OR?: postWhereInput[]
    NOT?: postWhereInput | postWhereInput[]
    title?: StringFilter<"post"> | string
    images?: StringNullableListFilter<"post">
    price?: IntFilter<"post"> | number
    address?: StringFilter<"post"> | string
    city?: StringFilter<"post"> | string
    bedroom?: IntFilter<"post"> | number
    bathroom?: IntFilter<"post"> | number
    latitude?: FloatFilter<"post"> | number
    longitude?: FloatFilter<"post"> | number
    type?: EnumtypeFilter<"post"> | $Enums.type
    property?: EnumpropertyFilter<"post"> | $Enums.property
    createdAt?: DateTimeFilter<"post"> | Date | string
    userId?: StringFilter<"post"> | string
    user?: XOR<UserRelationFilter, userWhereInput>
    postDetail?: XOR<PostDetailNullableRelationFilter, postDetailWhereInput> | null
    savedPost?: SavedPostListRelationFilter
  }, "id">

  export type postOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    images?: SortOrder
    price?: SortOrder
    address?: SortOrder
    city?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    type?: SortOrder
    property?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
    _count?: postCountOrderByAggregateInput
    _avg?: postAvgOrderByAggregateInput
    _max?: postMaxOrderByAggregateInput
    _min?: postMinOrderByAggregateInput
    _sum?: postSumOrderByAggregateInput
  }

  export type postScalarWhereWithAggregatesInput = {
    AND?: postScalarWhereWithAggregatesInput | postScalarWhereWithAggregatesInput[]
    OR?: postScalarWhereWithAggregatesInput[]
    NOT?: postScalarWhereWithAggregatesInput | postScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"post"> | string
    title?: StringWithAggregatesFilter<"post"> | string
    images?: StringNullableListFilter<"post">
    price?: IntWithAggregatesFilter<"post"> | number
    address?: StringWithAggregatesFilter<"post"> | string
    city?: StringWithAggregatesFilter<"post"> | string
    bedroom?: IntWithAggregatesFilter<"post"> | number
    bathroom?: IntWithAggregatesFilter<"post"> | number
    latitude?: FloatWithAggregatesFilter<"post"> | number
    longitude?: FloatWithAggregatesFilter<"post"> | number
    type?: EnumtypeWithAggregatesFilter<"post"> | $Enums.type
    property?: EnumpropertyWithAggregatesFilter<"post"> | $Enums.property
    createdAt?: DateTimeWithAggregatesFilter<"post"> | Date | string
    userId?: StringWithAggregatesFilter<"post"> | string
  }

  export type postDetailWhereInput = {
    AND?: postDetailWhereInput | postDetailWhereInput[]
    OR?: postDetailWhereInput[]
    NOT?: postDetailWhereInput | postDetailWhereInput[]
    id?: StringFilter<"postDetail"> | string
    desc?: StringFilter<"postDetail"> | string
    size?: IntNullableFilter<"postDetail"> | number | null
    utilities?: StringNullableFilter<"postDetail"> | string | null
    pet?: StringNullableFilter<"postDetail"> | string | null
    income?: StringNullableFilter<"postDetail"> | string | null
    school?: IntNullableFilter<"postDetail"> | number | null
    bus?: IntNullableFilter<"postDetail"> | number | null
    restaurant?: IntNullableFilter<"postDetail"> | number | null
    postId?: StringFilter<"postDetail"> | string
    post?: XOR<PostRelationFilter, postWhereInput>
  }

  export type postDetailOrderByWithRelationInput = {
    id?: SortOrder
    desc?: SortOrder
    size?: SortOrder
    utilities?: SortOrder
    pet?: SortOrder
    income?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
    postId?: SortOrder
    post?: postOrderByWithRelationInput
  }

  export type postDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    postId?: string
    AND?: postDetailWhereInput | postDetailWhereInput[]
    OR?: postDetailWhereInput[]
    NOT?: postDetailWhereInput | postDetailWhereInput[]
    desc?: StringFilter<"postDetail"> | string
    size?: IntNullableFilter<"postDetail"> | number | null
    utilities?: StringNullableFilter<"postDetail"> | string | null
    pet?: StringNullableFilter<"postDetail"> | string | null
    income?: StringNullableFilter<"postDetail"> | string | null
    school?: IntNullableFilter<"postDetail"> | number | null
    bus?: IntNullableFilter<"postDetail"> | number | null
    restaurant?: IntNullableFilter<"postDetail"> | number | null
    post?: XOR<PostRelationFilter, postWhereInput>
  }, "id" | "postId">

  export type postDetailOrderByWithAggregationInput = {
    id?: SortOrder
    desc?: SortOrder
    size?: SortOrder
    utilities?: SortOrder
    pet?: SortOrder
    income?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
    postId?: SortOrder
    _count?: postDetailCountOrderByAggregateInput
    _avg?: postDetailAvgOrderByAggregateInput
    _max?: postDetailMaxOrderByAggregateInput
    _min?: postDetailMinOrderByAggregateInput
    _sum?: postDetailSumOrderByAggregateInput
  }

  export type postDetailScalarWhereWithAggregatesInput = {
    AND?: postDetailScalarWhereWithAggregatesInput | postDetailScalarWhereWithAggregatesInput[]
    OR?: postDetailScalarWhereWithAggregatesInput[]
    NOT?: postDetailScalarWhereWithAggregatesInput | postDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"postDetail"> | string
    desc?: StringWithAggregatesFilter<"postDetail"> | string
    size?: IntNullableWithAggregatesFilter<"postDetail"> | number | null
    utilities?: StringNullableWithAggregatesFilter<"postDetail"> | string | null
    pet?: StringNullableWithAggregatesFilter<"postDetail"> | string | null
    income?: StringNullableWithAggregatesFilter<"postDetail"> | string | null
    school?: IntNullableWithAggregatesFilter<"postDetail"> | number | null
    bus?: IntNullableWithAggregatesFilter<"postDetail"> | number | null
    restaurant?: IntNullableWithAggregatesFilter<"postDetail"> | number | null
    postId?: StringWithAggregatesFilter<"postDetail"> | string
  }

  export type savedPostWhereInput = {
    AND?: savedPostWhereInput | savedPostWhereInput[]
    OR?: savedPostWhereInput[]
    NOT?: savedPostWhereInput | savedPostWhereInput[]
    id?: StringFilter<"savedPost"> | string
    userId?: StringFilter<"savedPost"> | string
    postId?: StringFilter<"savedPost"> | string
    createdAt?: DateTimeFilter<"savedPost"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    post?: XOR<PostRelationFilter, postWhereInput>
  }

  export type savedPostOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    user?: userOrderByWithRelationInput
    post?: postOrderByWithRelationInput
  }

  export type savedPostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_postId?: savedPostUserIdPostIdCompoundUniqueInput
    AND?: savedPostWhereInput | savedPostWhereInput[]
    OR?: savedPostWhereInput[]
    NOT?: savedPostWhereInput | savedPostWhereInput[]
    userId?: StringFilter<"savedPost"> | string
    postId?: StringFilter<"savedPost"> | string
    createdAt?: DateTimeFilter<"savedPost"> | Date | string
    user?: XOR<UserRelationFilter, userWhereInput>
    post?: XOR<PostRelationFilter, postWhereInput>
  }, "id" | "userId_postId">

  export type savedPostOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
    _count?: savedPostCountOrderByAggregateInput
    _max?: savedPostMaxOrderByAggregateInput
    _min?: savedPostMinOrderByAggregateInput
  }

  export type savedPostScalarWhereWithAggregatesInput = {
    AND?: savedPostScalarWhereWithAggregatesInput | savedPostScalarWhereWithAggregatesInput[]
    OR?: savedPostScalarWhereWithAggregatesInput[]
    NOT?: savedPostScalarWhereWithAggregatesInput | savedPostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"savedPost"> | string
    userId?: StringWithAggregatesFilter<"savedPost"> | string
    postId?: StringWithAggregatesFilter<"savedPost"> | string
    createdAt?: DateTimeWithAggregatesFilter<"savedPost"> | Date | string
  }

  export type chatWhereInput = {
    AND?: chatWhereInput | chatWhereInput[]
    OR?: chatWhereInput[]
    NOT?: chatWhereInput | chatWhereInput[]
    id?: StringFilter<"chat"> | string
    userIds?: StringNullableListFilter<"chat">
    createdAt?: DateTimeFilter<"chat"> | Date | string
    seenBy?: StringNullableListFilter<"chat">
    lastMessage?: StringNullableFilter<"chat"> | string | null
    users?: UserListRelationFilter
    message?: MessageListRelationFilter
  }

  export type chatOrderByWithRelationInput = {
    id?: SortOrder
    userIds?: SortOrder
    createdAt?: SortOrder
    seenBy?: SortOrder
    lastMessage?: SortOrder
    users?: userOrderByRelationAggregateInput
    message?: messageOrderByRelationAggregateInput
  }

  export type chatWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: chatWhereInput | chatWhereInput[]
    OR?: chatWhereInput[]
    NOT?: chatWhereInput | chatWhereInput[]
    userIds?: StringNullableListFilter<"chat">
    createdAt?: DateTimeFilter<"chat"> | Date | string
    seenBy?: StringNullableListFilter<"chat">
    lastMessage?: StringNullableFilter<"chat"> | string | null
    users?: UserListRelationFilter
    message?: MessageListRelationFilter
  }, "id">

  export type chatOrderByWithAggregationInput = {
    id?: SortOrder
    userIds?: SortOrder
    createdAt?: SortOrder
    seenBy?: SortOrder
    lastMessage?: SortOrder
    _count?: chatCountOrderByAggregateInput
    _max?: chatMaxOrderByAggregateInput
    _min?: chatMinOrderByAggregateInput
  }

  export type chatScalarWhereWithAggregatesInput = {
    AND?: chatScalarWhereWithAggregatesInput | chatScalarWhereWithAggregatesInput[]
    OR?: chatScalarWhereWithAggregatesInput[]
    NOT?: chatScalarWhereWithAggregatesInput | chatScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"chat"> | string
    userIds?: StringNullableListFilter<"chat">
    createdAt?: DateTimeWithAggregatesFilter<"chat"> | Date | string
    seenBy?: StringNullableListFilter<"chat">
    lastMessage?: StringNullableWithAggregatesFilter<"chat"> | string | null
  }

  export type messageWhereInput = {
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    id?: StringFilter<"message"> | string
    text?: StringFilter<"message"> | string
    userId?: StringFilter<"message"> | string
    chatId?: StringFilter<"message"> | string
    createdAt?: DateTimeFilter<"message"> | Date | string
    chat?: XOR<ChatRelationFilter, chatWhereInput>
  }

  export type messageOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    chat?: chatOrderByWithRelationInput
  }

  export type messageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    text?: StringFilter<"message"> | string
    userId?: StringFilter<"message"> | string
    chatId?: StringFilter<"message"> | string
    createdAt?: DateTimeFilter<"message"> | Date | string
    chat?: XOR<ChatRelationFilter, chatWhereInput>
  }, "id">

  export type messageOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    OR?: messageScalarWhereWithAggregatesInput[]
    NOT?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"message"> | string
    text?: StringWithAggregatesFilter<"message"> | string
    userId?: StringWithAggregatesFilter<"message"> | string
    chatId?: StringWithAggregatesFilter<"message"> | string
    createdAt?: DateTimeWithAggregatesFilter<"message"> | Date | string
  }

  export type userCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    posts?: postCreateNestedManyWithoutUserInput
    savedPost?: savedPostCreateNestedManyWithoutUserInput
    chats?: chatCreateNestedManyWithoutUsersInput
  }

  export type userUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    chatIds?: userCreatechatIdsInput | string[]
    posts?: postUncheckedCreateNestedManyWithoutUserInput
    savedPost?: savedPostUncheckedCreateNestedManyWithoutUserInput
    chats?: chatUncheckedCreateNestedManyWithoutUsersInput
  }

  export type userUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: postUpdateManyWithoutUserNestedInput
    savedPost?: savedPostUpdateManyWithoutUserNestedInput
    chats?: chatUpdateManyWithoutUsersNestedInput
  }

  export type userUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
    posts?: postUncheckedUpdateManyWithoutUserNestedInput
    savedPost?: savedPostUncheckedUpdateManyWithoutUserNestedInput
    chats?: chatUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type userCreateManyInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    chatIds?: userCreatechatIdsInput | string[]
  }

  export type userUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
  }

  export type postCreateInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    user: userCreateNestedOneWithoutPostsInput
    postDetail?: postDetailCreateNestedOneWithoutPostInput
    savedPost?: savedPostCreateNestedManyWithoutPostInput
  }

  export type postUncheckedCreateInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    userId: string
    postDetail?: postDetailUncheckedCreateNestedOneWithoutPostInput
    savedPost?: savedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type postUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    postDetail?: postDetailUpdateOneWithoutPostNestedInput
    savedPost?: savedPostUpdateManyWithoutPostNestedInput
  }

  export type postUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postDetail?: postDetailUncheckedUpdateOneWithoutPostNestedInput
    savedPost?: savedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type postCreateManyInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    userId: string
  }

  export type postUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type postUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type postDetailCreateInput = {
    id?: string
    desc: string
    size?: number | null
    utilities?: string | null
    pet?: string | null
    income?: string | null
    school?: number | null
    bus?: number | null
    restaurant?: number | null
    post: postCreateNestedOneWithoutPostDetailInput
  }

  export type postDetailUncheckedCreateInput = {
    id?: string
    desc: string
    size?: number | null
    utilities?: string | null
    pet?: string | null
    income?: string | null
    school?: number | null
    bus?: number | null
    restaurant?: number | null
    postId: string
  }

  export type postDetailUpdateInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
    post?: postUpdateOneRequiredWithoutPostDetailNestedInput
  }

  export type postDetailUncheckedUpdateInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type postDetailCreateManyInput = {
    id?: string
    desc: string
    size?: number | null
    utilities?: string | null
    pet?: string | null
    income?: string | null
    school?: number | null
    bus?: number | null
    restaurant?: number | null
    postId: string
  }

  export type postDetailUpdateManyMutationInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type postDetailUncheckedUpdateManyInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type savedPostCreateInput = {
    id?: string
    createdAt?: Date | string
    user: userCreateNestedOneWithoutSavedPostInput
    post: postCreateNestedOneWithoutSavedPostInput
  }

  export type savedPostUncheckedCreateInput = {
    id?: string
    userId: string
    postId: string
    createdAt?: Date | string
  }

  export type savedPostUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSavedPostNestedInput
    post?: postUpdateOneRequiredWithoutSavedPostNestedInput
  }

  export type savedPostUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type savedPostCreateManyInput = {
    id?: string
    userId: string
    postId: string
    createdAt?: Date | string
  }

  export type savedPostUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type savedPostUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type chatCreateInput = {
    id?: string
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    users?: userCreateNestedManyWithoutChatsInput
    message?: messageCreateNestedManyWithoutChatInput
  }

  export type chatUncheckedCreateInput = {
    id?: string
    userIds?: chatCreateuserIdsInput | string[]
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    users?: userUncheckedCreateNestedManyWithoutChatsInput
    message?: messageUncheckedCreateNestedManyWithoutChatInput
  }

  export type chatUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    users?: userUpdateManyWithoutChatsNestedInput
    message?: messageUpdateManyWithoutChatNestedInput
  }

  export type chatUncheckedUpdateInput = {
    userIds?: chatUpdateuserIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    users?: userUncheckedUpdateManyWithoutChatsNestedInput
    message?: messageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type chatCreateManyInput = {
    id?: string
    userIds?: chatCreateuserIdsInput | string[]
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
  }

  export type chatUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type chatUncheckedUpdateManyInput = {
    userIds?: chatUpdateuserIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type messageCreateInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
    chat: chatCreateNestedOneWithoutMessageInput
  }

  export type messageUncheckedCreateInput = {
    id?: string
    text: string
    userId: string
    chatId: string
    createdAt?: Date | string
  }

  export type messageUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chat?: chatUpdateOneRequiredWithoutMessageNestedInput
  }

  export type messageUncheckedUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageCreateManyInput = {
    id?: string
    text: string
    userId: string
    chatId: string
    createdAt?: Date | string
  }

  export type messageUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    chatId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type PostListRelationFilter = {
    every?: postWhereInput
    some?: postWhereInput
    none?: postWhereInput
  }

  export type SavedPostListRelationFilter = {
    every?: savedPostWhereInput
    some?: savedPostWhereInput
    none?: savedPostWhereInput
  }

  export type ChatListRelationFilter = {
    every?: chatWhereInput
    some?: chatWhereInput
    none?: chatWhereInput
  }

  export type postOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type savedPostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
    chatIds?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    password?: SortOrder
    profilePic?: SortOrder
    createdAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumtypeFilter<$PrismaModel = never> = {
    equals?: $Enums.type | EnumtypeFieldRefInput<$PrismaModel>
    in?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeFilter<$PrismaModel> | $Enums.type
  }

  export type EnumpropertyFilter<$PrismaModel = never> = {
    equals?: $Enums.property | EnumpropertyFieldRefInput<$PrismaModel>
    in?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    notIn?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    not?: NestedEnumpropertyFilter<$PrismaModel> | $Enums.property
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type PostDetailNullableRelationFilter = {
    is?: postDetailWhereInput | null
    isNot?: postDetailWhereInput | null
  }

  export type postCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    images?: SortOrder
    price?: SortOrder
    address?: SortOrder
    city?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    type?: SortOrder
    property?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type postAvgOrderByAggregateInput = {
    price?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type postMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    address?: SortOrder
    city?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    type?: SortOrder
    property?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type postMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    address?: SortOrder
    city?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
    type?: SortOrder
    property?: SortOrder
    createdAt?: SortOrder
    userId?: SortOrder
  }

  export type postSumOrderByAggregateInput = {
    price?: SortOrder
    bedroom?: SortOrder
    bathroom?: SortOrder
    latitude?: SortOrder
    longitude?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumtypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.type | EnumtypeFieldRefInput<$PrismaModel>
    in?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeWithAggregatesFilter<$PrismaModel> | $Enums.type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtypeFilter<$PrismaModel>
    _max?: NestedEnumtypeFilter<$PrismaModel>
  }

  export type EnumpropertyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.property | EnumpropertyFieldRefInput<$PrismaModel>
    in?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    notIn?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    not?: NestedEnumpropertyWithAggregatesFilter<$PrismaModel> | $Enums.property
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpropertyFilter<$PrismaModel>
    _max?: NestedEnumpropertyFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type PostRelationFilter = {
    is?: postWhereInput
    isNot?: postWhereInput
  }

  export type postDetailCountOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    size?: SortOrder
    utilities?: SortOrder
    pet?: SortOrder
    income?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
    postId?: SortOrder
  }

  export type postDetailAvgOrderByAggregateInput = {
    size?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
  }

  export type postDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    size?: SortOrder
    utilities?: SortOrder
    pet?: SortOrder
    income?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
    postId?: SortOrder
  }

  export type postDetailMinOrderByAggregateInput = {
    id?: SortOrder
    desc?: SortOrder
    size?: SortOrder
    utilities?: SortOrder
    pet?: SortOrder
    income?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
    postId?: SortOrder
  }

  export type postDetailSumOrderByAggregateInput = {
    size?: SortOrder
    school?: SortOrder
    bus?: SortOrder
    restaurant?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type savedPostUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type savedPostCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type savedPostMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type savedPostMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    createdAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: userWhereInput
    some?: userWhereInput
    none?: userWhereInput
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type userOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chatCountOrderByAggregateInput = {
    id?: SortOrder
    userIds?: SortOrder
    createdAt?: SortOrder
    seenBy?: SortOrder
    lastMessage?: SortOrder
  }

  export type chatMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastMessage?: SortOrder
  }

  export type chatMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    lastMessage?: SortOrder
  }

  export type ChatRelationFilter = {
    is?: chatWhereInput
    isNot?: chatWhereInput
  }

  export type messageCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    userId?: SortOrder
    chatId?: SortOrder
    createdAt?: SortOrder
  }

  export type postCreateNestedManyWithoutUserInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type savedPostCreateNestedManyWithoutUserInput = {
    create?: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput> | savedPostCreateWithoutUserInput[] | savedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutUserInput | savedPostCreateOrConnectWithoutUserInput[]
    createMany?: savedPostCreateManyUserInputEnvelope
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
  }

  export type chatCreateNestedManyWithoutUsersInput = {
    create?: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput> | chatCreateWithoutUsersInput[] | chatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: chatCreateOrConnectWithoutUsersInput | chatCreateOrConnectWithoutUsersInput[]
    connect?: chatWhereUniqueInput | chatWhereUniqueInput[]
  }

  export type userCreatechatIdsInput = {
    set: string[]
  }

  export type postUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
  }

  export type savedPostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput> | savedPostCreateWithoutUserInput[] | savedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutUserInput | savedPostCreateOrConnectWithoutUserInput[]
    createMany?: savedPostCreateManyUserInputEnvelope
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
  }

  export type chatUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput> | chatCreateWithoutUsersInput[] | chatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: chatCreateOrConnectWithoutUsersInput | chatCreateOrConnectWithoutUsersInput[]
    connect?: chatWhereUniqueInput | chatWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
    unset?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type postUpdateManyWithoutUserNestedInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    upsert?: postUpsertWithWhereUniqueWithoutUserInput | postUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutUserInput | postUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postUpdateManyWithWhereWithoutUserInput | postUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type savedPostUpdateManyWithoutUserNestedInput = {
    create?: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput> | savedPostCreateWithoutUserInput[] | savedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutUserInput | savedPostCreateOrConnectWithoutUserInput[]
    upsert?: savedPostUpsertWithWhereUniqueWithoutUserInput | savedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: savedPostCreateManyUserInputEnvelope
    set?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    disconnect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    delete?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    update?: savedPostUpdateWithWhereUniqueWithoutUserInput | savedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: savedPostUpdateManyWithWhereWithoutUserInput | savedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
  }

  export type chatUpdateManyWithoutUsersNestedInput = {
    create?: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput> | chatCreateWithoutUsersInput[] | chatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: chatCreateOrConnectWithoutUsersInput | chatCreateOrConnectWithoutUsersInput[]
    upsert?: chatUpsertWithWhereUniqueWithoutUsersInput | chatUpsertWithWhereUniqueWithoutUsersInput[]
    set?: chatWhereUniqueInput | chatWhereUniqueInput[]
    disconnect?: chatWhereUniqueInput | chatWhereUniqueInput[]
    delete?: chatWhereUniqueInput | chatWhereUniqueInput[]
    connect?: chatWhereUniqueInput | chatWhereUniqueInput[]
    update?: chatUpdateWithWhereUniqueWithoutUsersInput | chatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: chatUpdateManyWithWhereWithoutUsersInput | chatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: chatScalarWhereInput | chatScalarWhereInput[]
  }

  export type userUpdatechatIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type postUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput> | postCreateWithoutUserInput[] | postUncheckedCreateWithoutUserInput[]
    connectOrCreate?: postCreateOrConnectWithoutUserInput | postCreateOrConnectWithoutUserInput[]
    upsert?: postUpsertWithWhereUniqueWithoutUserInput | postUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: postCreateManyUserInputEnvelope
    set?: postWhereUniqueInput | postWhereUniqueInput[]
    disconnect?: postWhereUniqueInput | postWhereUniqueInput[]
    delete?: postWhereUniqueInput | postWhereUniqueInput[]
    connect?: postWhereUniqueInput | postWhereUniqueInput[]
    update?: postUpdateWithWhereUniqueWithoutUserInput | postUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: postUpdateManyWithWhereWithoutUserInput | postUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: postScalarWhereInput | postScalarWhereInput[]
  }

  export type savedPostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput> | savedPostCreateWithoutUserInput[] | savedPostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutUserInput | savedPostCreateOrConnectWithoutUserInput[]
    upsert?: savedPostUpsertWithWhereUniqueWithoutUserInput | savedPostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: savedPostCreateManyUserInputEnvelope
    set?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    disconnect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    delete?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    update?: savedPostUpdateWithWhereUniqueWithoutUserInput | savedPostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: savedPostUpdateManyWithWhereWithoutUserInput | savedPostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
  }

  export type chatUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput> | chatCreateWithoutUsersInput[] | chatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: chatCreateOrConnectWithoutUsersInput | chatCreateOrConnectWithoutUsersInput[]
    upsert?: chatUpsertWithWhereUniqueWithoutUsersInput | chatUpsertWithWhereUniqueWithoutUsersInput[]
    set?: chatWhereUniqueInput | chatWhereUniqueInput[]
    disconnect?: chatWhereUniqueInput | chatWhereUniqueInput[]
    delete?: chatWhereUniqueInput | chatWhereUniqueInput[]
    connect?: chatWhereUniqueInput | chatWhereUniqueInput[]
    update?: chatUpdateWithWhereUniqueWithoutUsersInput | chatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: chatUpdateManyWithWhereWithoutUsersInput | chatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: chatScalarWhereInput | chatScalarWhereInput[]
  }

  export type postCreateimagesInput = {
    set: string[]
  }

  export type userCreateNestedOneWithoutPostsInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    connect?: userWhereUniqueInput
  }

  export type postDetailCreateNestedOneWithoutPostInput = {
    create?: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
    connectOrCreate?: postDetailCreateOrConnectWithoutPostInput
    connect?: postDetailWhereUniqueInput
  }

  export type savedPostCreateNestedManyWithoutPostInput = {
    create?: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput> | savedPostCreateWithoutPostInput[] | savedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutPostInput | savedPostCreateOrConnectWithoutPostInput[]
    createMany?: savedPostCreateManyPostInputEnvelope
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
  }

  export type postDetailUncheckedCreateNestedOneWithoutPostInput = {
    create?: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
    connectOrCreate?: postDetailCreateOrConnectWithoutPostInput
    connect?: postDetailWhereUniqueInput
  }

  export type savedPostUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput> | savedPostCreateWithoutPostInput[] | savedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutPostInput | savedPostCreateOrConnectWithoutPostInput[]
    createMany?: savedPostCreateManyPostInputEnvelope
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
  }

  export type postUpdateimagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumtypeFieldUpdateOperationsInput = {
    set?: $Enums.type
  }

  export type EnumpropertyFieldUpdateOperationsInput = {
    set?: $Enums.property
  }

  export type userUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostsInput
    upsert?: userUpsertWithoutPostsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPostsInput, userUpdateWithoutPostsInput>, userUncheckedUpdateWithoutPostsInput>
  }

  export type postDetailUpdateOneWithoutPostNestedInput = {
    create?: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
    connectOrCreate?: postDetailCreateOrConnectWithoutPostInput
    upsert?: postDetailUpsertWithoutPostInput
    disconnect?: postDetailWhereInput | boolean
    delete?: postDetailWhereInput | boolean
    connect?: postDetailWhereUniqueInput
    update?: XOR<XOR<postDetailUpdateToOneWithWhereWithoutPostInput, postDetailUpdateWithoutPostInput>, postDetailUncheckedUpdateWithoutPostInput>
  }

  export type savedPostUpdateManyWithoutPostNestedInput = {
    create?: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput> | savedPostCreateWithoutPostInput[] | savedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutPostInput | savedPostCreateOrConnectWithoutPostInput[]
    upsert?: savedPostUpsertWithWhereUniqueWithoutPostInput | savedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: savedPostCreateManyPostInputEnvelope
    set?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    disconnect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    delete?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    update?: savedPostUpdateWithWhereUniqueWithoutPostInput | savedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: savedPostUpdateManyWithWhereWithoutPostInput | savedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
  }

  export type postDetailUncheckedUpdateOneWithoutPostNestedInput = {
    create?: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
    connectOrCreate?: postDetailCreateOrConnectWithoutPostInput
    upsert?: postDetailUpsertWithoutPostInput
    disconnect?: postDetailWhereInput | boolean
    delete?: postDetailWhereInput | boolean
    connect?: postDetailWhereUniqueInput
    update?: XOR<XOR<postDetailUpdateToOneWithWhereWithoutPostInput, postDetailUpdateWithoutPostInput>, postDetailUncheckedUpdateWithoutPostInput>
  }

  export type savedPostUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput> | savedPostCreateWithoutPostInput[] | savedPostUncheckedCreateWithoutPostInput[]
    connectOrCreate?: savedPostCreateOrConnectWithoutPostInput | savedPostCreateOrConnectWithoutPostInput[]
    upsert?: savedPostUpsertWithWhereUniqueWithoutPostInput | savedPostUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: savedPostCreateManyPostInputEnvelope
    set?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    disconnect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    delete?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    connect?: savedPostWhereUniqueInput | savedPostWhereUniqueInput[]
    update?: savedPostUpdateWithWhereUniqueWithoutPostInput | savedPostUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: savedPostUpdateManyWithWhereWithoutPostInput | savedPostUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
  }

  export type postCreateNestedOneWithoutPostDetailInput = {
    create?: XOR<postCreateWithoutPostDetailInput, postUncheckedCreateWithoutPostDetailInput>
    connectOrCreate?: postCreateOrConnectWithoutPostDetailInput
    connect?: postWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
    unset?: boolean
  }

  export type postUpdateOneRequiredWithoutPostDetailNestedInput = {
    create?: XOR<postCreateWithoutPostDetailInput, postUncheckedCreateWithoutPostDetailInput>
    connectOrCreate?: postCreateOrConnectWithoutPostDetailInput
    upsert?: postUpsertWithoutPostDetailInput
    connect?: postWhereUniqueInput
    update?: XOR<XOR<postUpdateToOneWithWhereWithoutPostDetailInput, postUpdateWithoutPostDetailInput>, postUncheckedUpdateWithoutPostDetailInput>
  }

  export type userCreateNestedOneWithoutSavedPostInput = {
    create?: XOR<userCreateWithoutSavedPostInput, userUncheckedCreateWithoutSavedPostInput>
    connectOrCreate?: userCreateOrConnectWithoutSavedPostInput
    connect?: userWhereUniqueInput
  }

  export type postCreateNestedOneWithoutSavedPostInput = {
    create?: XOR<postCreateWithoutSavedPostInput, postUncheckedCreateWithoutSavedPostInput>
    connectOrCreate?: postCreateOrConnectWithoutSavedPostInput
    connect?: postWhereUniqueInput
  }

  export type userUpdateOneRequiredWithoutSavedPostNestedInput = {
    create?: XOR<userCreateWithoutSavedPostInput, userUncheckedCreateWithoutSavedPostInput>
    connectOrCreate?: userCreateOrConnectWithoutSavedPostInput
    upsert?: userUpsertWithoutSavedPostInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutSavedPostInput, userUpdateWithoutSavedPostInput>, userUncheckedUpdateWithoutSavedPostInput>
  }

  export type postUpdateOneRequiredWithoutSavedPostNestedInput = {
    create?: XOR<postCreateWithoutSavedPostInput, postUncheckedCreateWithoutSavedPostInput>
    connectOrCreate?: postCreateOrConnectWithoutSavedPostInput
    upsert?: postUpsertWithoutSavedPostInput
    connect?: postWhereUniqueInput
    update?: XOR<XOR<postUpdateToOneWithWhereWithoutSavedPostInput, postUpdateWithoutSavedPostInput>, postUncheckedUpdateWithoutSavedPostInput>
  }

  export type chatCreateseenByInput = {
    set: string[]
  }

  export type userCreateNestedManyWithoutChatsInput = {
    create?: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput> | userCreateWithoutChatsInput[] | userUncheckedCreateWithoutChatsInput[]
    connectOrCreate?: userCreateOrConnectWithoutChatsInput | userCreateOrConnectWithoutChatsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type messageCreateNestedManyWithoutChatInput = {
    create?: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput> | messageCreateWithoutChatInput[] | messageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatInput | messageCreateOrConnectWithoutChatInput[]
    createMany?: messageCreateManyChatInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type chatCreateuserIdsInput = {
    set: string[]
  }

  export type userUncheckedCreateNestedManyWithoutChatsInput = {
    create?: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput> | userCreateWithoutChatsInput[] | userUncheckedCreateWithoutChatsInput[]
    connectOrCreate?: userCreateOrConnectWithoutChatsInput | userCreateOrConnectWithoutChatsInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutChatInput = {
    create?: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput> | messageCreateWithoutChatInput[] | messageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatInput | messageCreateOrConnectWithoutChatInput[]
    createMany?: messageCreateManyChatInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type chatUpdateseenByInput = {
    set?: string[]
    push?: string | string[]
  }

  export type userUpdateManyWithoutChatsNestedInput = {
    create?: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput> | userCreateWithoutChatsInput[] | userUncheckedCreateWithoutChatsInput[]
    connectOrCreate?: userCreateOrConnectWithoutChatsInput | userCreateOrConnectWithoutChatsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutChatsInput | userUpsertWithWhereUniqueWithoutChatsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutChatsInput | userUpdateWithWhereUniqueWithoutChatsInput[]
    updateMany?: userUpdateManyWithWhereWithoutChatsInput | userUpdateManyWithWhereWithoutChatsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type messageUpdateManyWithoutChatNestedInput = {
    create?: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput> | messageCreateWithoutChatInput[] | messageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatInput | messageCreateOrConnectWithoutChatInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutChatInput | messageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: messageCreateManyChatInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutChatInput | messageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: messageUpdateManyWithWhereWithoutChatInput | messageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type chatUpdateuserIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type userUncheckedUpdateManyWithoutChatsNestedInput = {
    create?: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput> | userCreateWithoutChatsInput[] | userUncheckedCreateWithoutChatsInput[]
    connectOrCreate?: userCreateOrConnectWithoutChatsInput | userCreateOrConnectWithoutChatsInput[]
    upsert?: userUpsertWithWhereUniqueWithoutChatsInput | userUpsertWithWhereUniqueWithoutChatsInput[]
    set?: userWhereUniqueInput | userWhereUniqueInput[]
    disconnect?: userWhereUniqueInput | userWhereUniqueInput[]
    delete?: userWhereUniqueInput | userWhereUniqueInput[]
    connect?: userWhereUniqueInput | userWhereUniqueInput[]
    update?: userUpdateWithWhereUniqueWithoutChatsInput | userUpdateWithWhereUniqueWithoutChatsInput[]
    updateMany?: userUpdateManyWithWhereWithoutChatsInput | userUpdateManyWithWhereWithoutChatsInput[]
    deleteMany?: userScalarWhereInput | userScalarWhereInput[]
  }

  export type messageUncheckedUpdateManyWithoutChatNestedInput = {
    create?: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput> | messageCreateWithoutChatInput[] | messageUncheckedCreateWithoutChatInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatInput | messageCreateOrConnectWithoutChatInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutChatInput | messageUpsertWithWhereUniqueWithoutChatInput[]
    createMany?: messageCreateManyChatInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutChatInput | messageUpdateWithWhereUniqueWithoutChatInput[]
    updateMany?: messageUpdateManyWithWhereWithoutChatInput | messageUpdateManyWithWhereWithoutChatInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type chatCreateNestedOneWithoutMessageInput = {
    create?: XOR<chatCreateWithoutMessageInput, chatUncheckedCreateWithoutMessageInput>
    connectOrCreate?: chatCreateOrConnectWithoutMessageInput
    connect?: chatWhereUniqueInput
  }

  export type chatUpdateOneRequiredWithoutMessageNestedInput = {
    create?: XOR<chatCreateWithoutMessageInput, chatUncheckedCreateWithoutMessageInput>
    connectOrCreate?: chatCreateOrConnectWithoutMessageInput
    upsert?: chatUpsertWithoutMessageInput
    connect?: chatWhereUniqueInput
    update?: XOR<XOR<chatUpdateToOneWithWhereWithoutMessageInput, chatUpdateWithoutMessageInput>, chatUncheckedUpdateWithoutMessageInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
    isSet?: boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumtypeFilter<$PrismaModel = never> = {
    equals?: $Enums.type | EnumtypeFieldRefInput<$PrismaModel>
    in?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeFilter<$PrismaModel> | $Enums.type
  }

  export type NestedEnumpropertyFilter<$PrismaModel = never> = {
    equals?: $Enums.property | EnumpropertyFieldRefInput<$PrismaModel>
    in?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    notIn?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    not?: NestedEnumpropertyFilter<$PrismaModel> | $Enums.property
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumtypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.type | EnumtypeFieldRefInput<$PrismaModel>
    in?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.type[] | ListEnumtypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtypeWithAggregatesFilter<$PrismaModel> | $Enums.type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtypeFilter<$PrismaModel>
    _max?: NestedEnumtypeFilter<$PrismaModel>
  }

  export type NestedEnumpropertyWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.property | EnumpropertyFieldRefInput<$PrismaModel>
    in?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    notIn?: $Enums.property[] | ListEnumpropertyFieldRefInput<$PrismaModel>
    not?: NestedEnumpropertyWithAggregatesFilter<$PrismaModel> | $Enums.property
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumpropertyFilter<$PrismaModel>
    _max?: NestedEnumpropertyFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type postCreateWithoutUserInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    postDetail?: postDetailCreateNestedOneWithoutPostInput
    savedPost?: savedPostCreateNestedManyWithoutPostInput
  }

  export type postUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    postDetail?: postDetailUncheckedCreateNestedOneWithoutPostInput
    savedPost?: savedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type postCreateOrConnectWithoutUserInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput>
  }

  export type postCreateManyUserInputEnvelope = {
    data: postCreateManyUserInput | postCreateManyUserInput[]
  }

  export type savedPostCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    post: postCreateNestedOneWithoutSavedPostInput
  }

  export type savedPostUncheckedCreateWithoutUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type savedPostCreateOrConnectWithoutUserInput = {
    where: savedPostWhereUniqueInput
    create: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput>
  }

  export type savedPostCreateManyUserInputEnvelope = {
    data: savedPostCreateManyUserInput | savedPostCreateManyUserInput[]
  }

  export type chatCreateWithoutUsersInput = {
    id?: string
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    message?: messageCreateNestedManyWithoutChatInput
  }

  export type chatUncheckedCreateWithoutUsersInput = {
    id?: string
    userIds?: chatCreateuserIdsInput | string[]
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    message?: messageUncheckedCreateNestedManyWithoutChatInput
  }

  export type chatCreateOrConnectWithoutUsersInput = {
    where: chatWhereUniqueInput
    create: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput>
  }

  export type postUpsertWithWhereUniqueWithoutUserInput = {
    where: postWhereUniqueInput
    update: XOR<postUpdateWithoutUserInput, postUncheckedUpdateWithoutUserInput>
    create: XOR<postCreateWithoutUserInput, postUncheckedCreateWithoutUserInput>
  }

  export type postUpdateWithWhereUniqueWithoutUserInput = {
    where: postWhereUniqueInput
    data: XOR<postUpdateWithoutUserInput, postUncheckedUpdateWithoutUserInput>
  }

  export type postUpdateManyWithWhereWithoutUserInput = {
    where: postScalarWhereInput
    data: XOR<postUpdateManyMutationInput, postUncheckedUpdateManyWithoutUserInput>
  }

  export type postScalarWhereInput = {
    AND?: postScalarWhereInput | postScalarWhereInput[]
    OR?: postScalarWhereInput[]
    NOT?: postScalarWhereInput | postScalarWhereInput[]
    id?: StringFilter<"post"> | string
    title?: StringFilter<"post"> | string
    images?: StringNullableListFilter<"post">
    price?: IntFilter<"post"> | number
    address?: StringFilter<"post"> | string
    city?: StringFilter<"post"> | string
    bedroom?: IntFilter<"post"> | number
    bathroom?: IntFilter<"post"> | number
    latitude?: FloatFilter<"post"> | number
    longitude?: FloatFilter<"post"> | number
    type?: EnumtypeFilter<"post"> | $Enums.type
    property?: EnumpropertyFilter<"post"> | $Enums.property
    createdAt?: DateTimeFilter<"post"> | Date | string
    userId?: StringFilter<"post"> | string
  }

  export type savedPostUpsertWithWhereUniqueWithoutUserInput = {
    where: savedPostWhereUniqueInput
    update: XOR<savedPostUpdateWithoutUserInput, savedPostUncheckedUpdateWithoutUserInput>
    create: XOR<savedPostCreateWithoutUserInput, savedPostUncheckedCreateWithoutUserInput>
  }

  export type savedPostUpdateWithWhereUniqueWithoutUserInput = {
    where: savedPostWhereUniqueInput
    data: XOR<savedPostUpdateWithoutUserInput, savedPostUncheckedUpdateWithoutUserInput>
  }

  export type savedPostUpdateManyWithWhereWithoutUserInput = {
    where: savedPostScalarWhereInput
    data: XOR<savedPostUpdateManyMutationInput, savedPostUncheckedUpdateManyWithoutUserInput>
  }

  export type savedPostScalarWhereInput = {
    AND?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
    OR?: savedPostScalarWhereInput[]
    NOT?: savedPostScalarWhereInput | savedPostScalarWhereInput[]
    id?: StringFilter<"savedPost"> | string
    userId?: StringFilter<"savedPost"> | string
    postId?: StringFilter<"savedPost"> | string
    createdAt?: DateTimeFilter<"savedPost"> | Date | string
  }

  export type chatUpsertWithWhereUniqueWithoutUsersInput = {
    where: chatWhereUniqueInput
    update: XOR<chatUpdateWithoutUsersInput, chatUncheckedUpdateWithoutUsersInput>
    create: XOR<chatCreateWithoutUsersInput, chatUncheckedCreateWithoutUsersInput>
  }

  export type chatUpdateWithWhereUniqueWithoutUsersInput = {
    where: chatWhereUniqueInput
    data: XOR<chatUpdateWithoutUsersInput, chatUncheckedUpdateWithoutUsersInput>
  }

  export type chatUpdateManyWithWhereWithoutUsersInput = {
    where: chatScalarWhereInput
    data: XOR<chatUpdateManyMutationInput, chatUncheckedUpdateManyWithoutUsersInput>
  }

  export type chatScalarWhereInput = {
    AND?: chatScalarWhereInput | chatScalarWhereInput[]
    OR?: chatScalarWhereInput[]
    NOT?: chatScalarWhereInput | chatScalarWhereInput[]
    id?: StringFilter<"chat"> | string
    userIds?: StringNullableListFilter<"chat">
    createdAt?: DateTimeFilter<"chat"> | Date | string
    seenBy?: StringNullableListFilter<"chat">
    lastMessage?: StringNullableFilter<"chat"> | string | null
  }

  export type userCreateWithoutPostsInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    savedPost?: savedPostCreateNestedManyWithoutUserInput
    chats?: chatCreateNestedManyWithoutUsersInput
  }

  export type userUncheckedCreateWithoutPostsInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    chatIds?: userCreatechatIdsInput | string[]
    savedPost?: savedPostUncheckedCreateNestedManyWithoutUserInput
    chats?: chatUncheckedCreateNestedManyWithoutUsersInput
  }

  export type userCreateOrConnectWithoutPostsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
  }

  export type postDetailCreateWithoutPostInput = {
    id?: string
    desc: string
    size?: number | null
    utilities?: string | null
    pet?: string | null
    income?: string | null
    school?: number | null
    bus?: number | null
    restaurant?: number | null
  }

  export type postDetailUncheckedCreateWithoutPostInput = {
    id?: string
    desc: string
    size?: number | null
    utilities?: string | null
    pet?: string | null
    income?: string | null
    school?: number | null
    bus?: number | null
    restaurant?: number | null
  }

  export type postDetailCreateOrConnectWithoutPostInput = {
    where: postDetailWhereUniqueInput
    create: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
  }

  export type savedPostCreateWithoutPostInput = {
    id?: string
    createdAt?: Date | string
    user: userCreateNestedOneWithoutSavedPostInput
  }

  export type savedPostUncheckedCreateWithoutPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type savedPostCreateOrConnectWithoutPostInput = {
    where: savedPostWhereUniqueInput
    create: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput>
  }

  export type savedPostCreateManyPostInputEnvelope = {
    data: savedPostCreateManyPostInput | savedPostCreateManyPostInput[]
  }

  export type userUpsertWithoutPostsInput = {
    update: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
    create: XOR<userCreateWithoutPostsInput, userUncheckedCreateWithoutPostsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPostsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPostsInput, userUncheckedUpdateWithoutPostsInput>
  }

  export type userUpdateWithoutPostsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    savedPost?: savedPostUpdateManyWithoutUserNestedInput
    chats?: chatUpdateManyWithoutUsersNestedInput
  }

  export type userUncheckedUpdateWithoutPostsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
    savedPost?: savedPostUncheckedUpdateManyWithoutUserNestedInput
    chats?: chatUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type postDetailUpsertWithoutPostInput = {
    update: XOR<postDetailUpdateWithoutPostInput, postDetailUncheckedUpdateWithoutPostInput>
    create: XOR<postDetailCreateWithoutPostInput, postDetailUncheckedCreateWithoutPostInput>
    where?: postDetailWhereInput
  }

  export type postDetailUpdateToOneWithWhereWithoutPostInput = {
    where?: postDetailWhereInput
    data: XOR<postDetailUpdateWithoutPostInput, postDetailUncheckedUpdateWithoutPostInput>
  }

  export type postDetailUpdateWithoutPostInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type postDetailUncheckedUpdateWithoutPostInput = {
    desc?: StringFieldUpdateOperationsInput | string
    size?: NullableIntFieldUpdateOperationsInput | number | null
    utilities?: NullableStringFieldUpdateOperationsInput | string | null
    pet?: NullableStringFieldUpdateOperationsInput | string | null
    income?: NullableStringFieldUpdateOperationsInput | string | null
    school?: NullableIntFieldUpdateOperationsInput | number | null
    bus?: NullableIntFieldUpdateOperationsInput | number | null
    restaurant?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type savedPostUpsertWithWhereUniqueWithoutPostInput = {
    where: savedPostWhereUniqueInput
    update: XOR<savedPostUpdateWithoutPostInput, savedPostUncheckedUpdateWithoutPostInput>
    create: XOR<savedPostCreateWithoutPostInput, savedPostUncheckedCreateWithoutPostInput>
  }

  export type savedPostUpdateWithWhereUniqueWithoutPostInput = {
    where: savedPostWhereUniqueInput
    data: XOR<savedPostUpdateWithoutPostInput, savedPostUncheckedUpdateWithoutPostInput>
  }

  export type savedPostUpdateManyWithWhereWithoutPostInput = {
    where: savedPostScalarWhereInput
    data: XOR<savedPostUpdateManyMutationInput, savedPostUncheckedUpdateManyWithoutPostInput>
  }

  export type postCreateWithoutPostDetailInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    user: userCreateNestedOneWithoutPostsInput
    savedPost?: savedPostCreateNestedManyWithoutPostInput
  }

  export type postUncheckedCreateWithoutPostDetailInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    userId: string
    savedPost?: savedPostUncheckedCreateNestedManyWithoutPostInput
  }

  export type postCreateOrConnectWithoutPostDetailInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutPostDetailInput, postUncheckedCreateWithoutPostDetailInput>
  }

  export type postUpsertWithoutPostDetailInput = {
    update: XOR<postUpdateWithoutPostDetailInput, postUncheckedUpdateWithoutPostDetailInput>
    create: XOR<postCreateWithoutPostDetailInput, postUncheckedCreateWithoutPostDetailInput>
    where?: postWhereInput
  }

  export type postUpdateToOneWithWhereWithoutPostDetailInput = {
    where?: postWhereInput
    data: XOR<postUpdateWithoutPostDetailInput, postUncheckedUpdateWithoutPostDetailInput>
  }

  export type postUpdateWithoutPostDetailInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    savedPost?: savedPostUpdateManyWithoutPostNestedInput
  }

  export type postUncheckedUpdateWithoutPostDetailInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    savedPost?: savedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type userCreateWithoutSavedPostInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    posts?: postCreateNestedManyWithoutUserInput
    chats?: chatCreateNestedManyWithoutUsersInput
  }

  export type userUncheckedCreateWithoutSavedPostInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    chatIds?: userCreatechatIdsInput | string[]
    posts?: postUncheckedCreateNestedManyWithoutUserInput
    chats?: chatUncheckedCreateNestedManyWithoutUsersInput
  }

  export type userCreateOrConnectWithoutSavedPostInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutSavedPostInput, userUncheckedCreateWithoutSavedPostInput>
  }

  export type postCreateWithoutSavedPostInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    user: userCreateNestedOneWithoutPostsInput
    postDetail?: postDetailCreateNestedOneWithoutPostInput
  }

  export type postUncheckedCreateWithoutSavedPostInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
    userId: string
    postDetail?: postDetailUncheckedCreateNestedOneWithoutPostInput
  }

  export type postCreateOrConnectWithoutSavedPostInput = {
    where: postWhereUniqueInput
    create: XOR<postCreateWithoutSavedPostInput, postUncheckedCreateWithoutSavedPostInput>
  }

  export type userUpsertWithoutSavedPostInput = {
    update: XOR<userUpdateWithoutSavedPostInput, userUncheckedUpdateWithoutSavedPostInput>
    create: XOR<userCreateWithoutSavedPostInput, userUncheckedCreateWithoutSavedPostInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutSavedPostInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutSavedPostInput, userUncheckedUpdateWithoutSavedPostInput>
  }

  export type userUpdateWithoutSavedPostInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: postUpdateManyWithoutUserNestedInput
    chats?: chatUpdateManyWithoutUsersNestedInput
  }

  export type userUncheckedUpdateWithoutSavedPostInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
    posts?: postUncheckedUpdateManyWithoutUserNestedInput
    chats?: chatUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type postUpsertWithoutSavedPostInput = {
    update: XOR<postUpdateWithoutSavedPostInput, postUncheckedUpdateWithoutSavedPostInput>
    create: XOR<postCreateWithoutSavedPostInput, postUncheckedCreateWithoutSavedPostInput>
    where?: postWhereInput
  }

  export type postUpdateToOneWithWhereWithoutSavedPostInput = {
    where?: postWhereInput
    data: XOR<postUpdateWithoutSavedPostInput, postUncheckedUpdateWithoutSavedPostInput>
  }

  export type postUpdateWithoutSavedPostInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutPostsNestedInput
    postDetail?: postDetailUpdateOneWithoutPostNestedInput
  }

  export type postUncheckedUpdateWithoutSavedPostInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postDetail?: postDetailUncheckedUpdateOneWithoutPostNestedInput
  }

  export type userCreateWithoutChatsInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    posts?: postCreateNestedManyWithoutUserInput
    savedPost?: savedPostCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateWithoutChatsInput = {
    id?: string
    email: string
    username: string
    password: string
    profilePic?: string | null
    createdAt?: Date | string
    chatIds?: userCreatechatIdsInput | string[]
    posts?: postUncheckedCreateNestedManyWithoutUserInput
    savedPost?: savedPostUncheckedCreateNestedManyWithoutUserInput
  }

  export type userCreateOrConnectWithoutChatsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput>
  }

  export type messageCreateWithoutChatInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
  }

  export type messageUncheckedCreateWithoutChatInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
  }

  export type messageCreateOrConnectWithoutChatInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput>
  }

  export type messageCreateManyChatInputEnvelope = {
    data: messageCreateManyChatInput | messageCreateManyChatInput[]
  }

  export type userUpsertWithWhereUniqueWithoutChatsInput = {
    where: userWhereUniqueInput
    update: XOR<userUpdateWithoutChatsInput, userUncheckedUpdateWithoutChatsInput>
    create: XOR<userCreateWithoutChatsInput, userUncheckedCreateWithoutChatsInput>
  }

  export type userUpdateWithWhereUniqueWithoutChatsInput = {
    where: userWhereUniqueInput
    data: XOR<userUpdateWithoutChatsInput, userUncheckedUpdateWithoutChatsInput>
  }

  export type userUpdateManyWithWhereWithoutChatsInput = {
    where: userScalarWhereInput
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyWithoutChatsInput>
  }

  export type userScalarWhereInput = {
    AND?: userScalarWhereInput | userScalarWhereInput[]
    OR?: userScalarWhereInput[]
    NOT?: userScalarWhereInput | userScalarWhereInput[]
    id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    username?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    profilePic?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    chatIds?: StringNullableListFilter<"user">
  }

  export type messageUpsertWithWhereUniqueWithoutChatInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutChatInput, messageUncheckedUpdateWithoutChatInput>
    create: XOR<messageCreateWithoutChatInput, messageUncheckedCreateWithoutChatInput>
  }

  export type messageUpdateWithWhereUniqueWithoutChatInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutChatInput, messageUncheckedUpdateWithoutChatInput>
  }

  export type messageUpdateManyWithWhereWithoutChatInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutChatInput>
  }

  export type messageScalarWhereInput = {
    AND?: messageScalarWhereInput | messageScalarWhereInput[]
    OR?: messageScalarWhereInput[]
    NOT?: messageScalarWhereInput | messageScalarWhereInput[]
    id?: StringFilter<"message"> | string
    text?: StringFilter<"message"> | string
    userId?: StringFilter<"message"> | string
    chatId?: StringFilter<"message"> | string
    createdAt?: DateTimeFilter<"message"> | Date | string
  }

  export type chatCreateWithoutMessageInput = {
    id?: string
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    users?: userCreateNestedManyWithoutChatsInput
  }

  export type chatUncheckedCreateWithoutMessageInput = {
    id?: string
    userIds?: chatCreateuserIdsInput | string[]
    createdAt?: Date | string
    seenBy?: chatCreateseenByInput | string[]
    lastMessage?: string | null
    users?: userUncheckedCreateNestedManyWithoutChatsInput
  }

  export type chatCreateOrConnectWithoutMessageInput = {
    where: chatWhereUniqueInput
    create: XOR<chatCreateWithoutMessageInput, chatUncheckedCreateWithoutMessageInput>
  }

  export type chatUpsertWithoutMessageInput = {
    update: XOR<chatUpdateWithoutMessageInput, chatUncheckedUpdateWithoutMessageInput>
    create: XOR<chatCreateWithoutMessageInput, chatUncheckedCreateWithoutMessageInput>
    where?: chatWhereInput
  }

  export type chatUpdateToOneWithWhereWithoutMessageInput = {
    where?: chatWhereInput
    data: XOR<chatUpdateWithoutMessageInput, chatUncheckedUpdateWithoutMessageInput>
  }

  export type chatUpdateWithoutMessageInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    users?: userUpdateManyWithoutChatsNestedInput
  }

  export type chatUncheckedUpdateWithoutMessageInput = {
    userIds?: chatUpdateuserIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    users?: userUncheckedUpdateManyWithoutChatsNestedInput
  }

  export type postCreateManyUserInput = {
    id?: string
    title: string
    images?: postCreateimagesInput | string[]
    price: number
    address: string
    city: string
    bedroom: number
    bathroom: number
    latitude: number
    longitude: number
    type: $Enums.type
    property: $Enums.property
    createdAt?: Date | string
  }

  export type savedPostCreateManyUserInput = {
    id?: string
    postId: string
    createdAt?: Date | string
  }

  export type postUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postDetail?: postDetailUpdateOneWithoutPostNestedInput
    savedPost?: savedPostUpdateManyWithoutPostNestedInput
  }

  export type postUncheckedUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postDetail?: postDetailUncheckedUpdateOneWithoutPostNestedInput
    savedPost?: savedPostUncheckedUpdateManyWithoutPostNestedInput
  }

  export type postUncheckedUpdateManyWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    images?: postUpdateimagesInput | string[]
    price?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    bedroom?: IntFieldUpdateOperationsInput | number
    bathroom?: IntFieldUpdateOperationsInput | number
    latitude?: FloatFieldUpdateOperationsInput | number
    longitude?: FloatFieldUpdateOperationsInput | number
    type?: EnumtypeFieldUpdateOperationsInput | $Enums.type
    property?: EnumpropertyFieldUpdateOperationsInput | $Enums.property
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type savedPostUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    post?: postUpdateOneRequiredWithoutSavedPostNestedInput
  }

  export type savedPostUncheckedUpdateWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type savedPostUncheckedUpdateManyWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type chatUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUpdateManyWithoutChatNestedInput
  }

  export type chatUncheckedUpdateWithoutUsersInput = {
    userIds?: chatUpdateuserIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
    message?: messageUncheckedUpdateManyWithoutChatNestedInput
  }

  export type chatUncheckedUpdateManyWithoutUsersInput = {
    userIds?: chatUpdateuserIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    seenBy?: chatUpdateseenByInput | string[]
    lastMessage?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type savedPostCreateManyPostInput = {
    id?: string
    userId: string
    createdAt?: Date | string
  }

  export type savedPostUpdateWithoutPostInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: userUpdateOneRequiredWithoutSavedPostNestedInput
  }

  export type savedPostUncheckedUpdateWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type savedPostUncheckedUpdateManyWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageCreateManyChatInput = {
    id?: string
    text: string
    userId: string
    createdAt?: Date | string
  }

  export type userUpdateWithoutChatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    posts?: postUpdateManyWithoutUserNestedInput
    savedPost?: savedPostUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateWithoutChatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
    posts?: postUncheckedUpdateManyWithoutUserNestedInput
    savedPost?: savedPostUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateManyWithoutChatsInput = {
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    profilePic?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    chatIds?: userUpdatechatIdsInput | string[]
  }

  export type messageUpdateWithoutChatInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateWithoutChatInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyWithoutChatInput = {
    text?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatCountOutputTypeDefaultArgs instead
     */
    export type ChatCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postDefaultArgs instead
     */
    export type postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = postDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postDetailDefaultArgs instead
     */
    export type postDetailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = postDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use savedPostDefaultArgs instead
     */
    export type savedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = savedPostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use chatDefaultArgs instead
     */
    export type chatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = chatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use messageDefaultArgs instead
     */
    export type messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = messageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}